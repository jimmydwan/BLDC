
g431cbu6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005de8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005fc8  08005fc8  00015fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006050  08006050  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006050  08006050  00016050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006058  08006058  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006058  08006058  00016058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800605c  0800605c  0001605c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a08  20000010  08006070  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a18  08006070  00021a18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016670  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032a8  00000000  00000000  000366f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f0  00000000  00000000  000399a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dcd  00000000  00000000  0003ab90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002f6a  00000000  00000000  0003b95d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b71  00000000  00000000  0003e8c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c05d1  00000000  00000000  00053438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a10  00000000  00000000  00113a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0011841c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005fb0 	.word	0x08005fb0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08005fb0 	.word	0x08005fb0

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 f9e7 	bl	80008f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f818 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f8ae 	bl	8000688 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800052c:	f000 f860 	bl	80005f0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000530:	f002 ffb6 	bl	80034a0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000534:	4a05      	ldr	r2, [pc, #20]	; (800054c <main+0x30>)
 8000536:	2100      	movs	r1, #0
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <main+0x34>)
 800053a:	f002 fffb 	bl	8003534 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <main+0x38>)
 8000542:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000544:	f002 ffd0 	bl	80034e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x2c>
 800054a:	bf00      	nop
 800054c:	08005fec 	.word	0x08005fec
 8000550:	080006e9 	.word	0x080006e9
 8000554:	200000c0 	.word	0x200000c0

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0318 	add.w	r3, r7, #24
 8000562:	2238      	movs	r2, #56	; 0x38
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f005 fce8 	bl	8005f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800057a:	2000      	movs	r0, #0
 800057c:	f000 fd7c 	bl	8001078 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000588:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	2303      	movs	r3, #3
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 28;
 8000596:	231c      	movs	r3, #28
 8000598:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0318 	add.w	r3, r7, #24
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fe18 	bl	80011e0 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x62>
  {
    Error_Handler();
 80005b6:	f000 f89f 	bl	80006f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2303      	movs	r3, #3
 80005c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2104      	movs	r1, #4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 f916 	bl	8001804 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005de:	f000 f88b 	bl	80006f8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80005e2:	f001 fae5 	bl	8001bb0 <HAL_RCC_EnableCSS>
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80005f4:	4b22      	ldr	r3, [pc, #136]	; (8000680 <MX_USART3_UART_Init+0x90>)
 80005f6:	4a23      	ldr	r2, [pc, #140]	; (8000684 <MX_USART3_UART_Init+0x94>)
 80005f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <MX_USART3_UART_Init+0x90>)
 80005fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000600:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_USART3_UART_Init+0x90>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <MX_USART3_UART_Init+0x90>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_USART3_UART_Init+0x90>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_USART3_UART_Init+0x90>)
 8000616:	220c      	movs	r2, #12
 8000618:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <MX_USART3_UART_Init+0x90>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_USART3_UART_Init+0x90>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <MX_USART3_UART_Init+0x90>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_USART3_UART_Init+0x90>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <MX_USART3_UART_Init+0x90>)
 8000634:	2200      	movs	r2, #0
 8000636:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000638:	4811      	ldr	r0, [pc, #68]	; (8000680 <MX_USART3_UART_Init+0x90>)
 800063a:	f001 fd1b 	bl	8002074 <HAL_UART_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000644:	f000 f858 	bl	80006f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000648:	2100      	movs	r1, #0
 800064a:	480d      	ldr	r0, [pc, #52]	; (8000680 <MX_USART3_UART_Init+0x90>)
 800064c:	f002 fe29 	bl	80032a2 <HAL_UARTEx_SetTxFifoThreshold>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000656:	f000 f84f 	bl	80006f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800065a:	2100      	movs	r1, #0
 800065c:	4808      	ldr	r0, [pc, #32]	; (8000680 <MX_USART3_UART_Init+0x90>)
 800065e:	f002 fe5e 	bl	800331e <HAL_UARTEx_SetRxFifoThreshold>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000668:	f000 f846 	bl	80006f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_USART3_UART_Init+0x90>)
 800066e:	f002 fddf 	bl	8003230 <HAL_UARTEx_DisableFifoMode>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000678:	f000 f83e 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	2000002c 	.word	0x2000002c
 8000684:	40004800 	.word	0x40004800

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_GPIO_Init+0x5c>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <MX_GPIO_Init+0x5c>)
 8000694:	f043 0320 	orr.w	r3, r3, #32
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_GPIO_Init+0x5c>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0320 	and.w	r3, r3, #32
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_GPIO_Init+0x5c>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <MX_GPIO_Init+0x5c>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_GPIO_Init+0x5c>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_GPIO_Init+0x5c>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <MX_GPIO_Init+0x5c>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_GPIO_Init+0x5c>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000

080006e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006f0:	2001      	movs	r0, #1
 80006f2:	f002 ffb1 	bl	8003658 <osDelay>
 80006f6:	e7fb      	b.n	80006f0 <StartDefaultTask+0x8>

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x8>
	...

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_MspInit+0x50>)
 800070c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070e:	4a11      	ldr	r2, [pc, #68]	; (8000754 <HAL_MspInit+0x50>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6613      	str	r3, [r2, #96]	; 0x60
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <HAL_MspInit+0x50>)
 8000718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <HAL_MspInit+0x50>)
 8000724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000726:	4a0b      	ldr	r2, [pc, #44]	; (8000754 <HAL_MspInit+0x50>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072c:	6593      	str	r3, [r2, #88]	; 0x58
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <HAL_MspInit+0x50>)
 8000730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	210f      	movs	r1, #15
 800073e:	f06f 0001 	mvn.w	r0, #1
 8000742:	f000 fa22 	bl	8000b8a <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000746:	f000 fd3b 	bl	80011c0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000

08000758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b09a      	sub	sp, #104	; 0x68
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	2244      	movs	r2, #68	; 0x44
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f005 fbdf 	bl	8005f3c <memset>
  if(huart->Instance==USART3)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a23      	ldr	r2, [pc, #140]	; (8000810 <HAL_UART_MspInit+0xb8>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d13e      	bne.n	8000806 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000788:	2304      	movs	r3, #4
 800078a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4618      	mov	r0, r3
 8000796:	f001 fa7d 	bl	8001c94 <HAL_RCCEx_PeriphCLKConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007a0:	f7ff ffaa 	bl	80006f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <HAL_UART_MspInit+0xbc>)
 80007a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a8:	4a1a      	ldr	r2, [pc, #104]	; (8000814 <HAL_UART_MspInit+0xbc>)
 80007aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ae:	6593      	str	r3, [r2, #88]	; 0x58
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <HAL_UART_MspInit+0xbc>)
 80007b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <HAL_UART_MspInit+0xbc>)
 80007be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c0:	4a14      	ldr	r2, [pc, #80]	; (8000814 <HAL_UART_MspInit+0xbc>)
 80007c2:	f043 0302 	orr.w	r3, r3, #2
 80007c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <HAL_UART_MspInit+0xbc>)
 80007ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007cc:	f003 0302 	and.w	r3, r3, #2
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007d8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007e6:	2307      	movs	r3, #7
 80007e8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007ee:	4619      	mov	r1, r3
 80007f0:	4809      	ldr	r0, [pc, #36]	; (8000818 <HAL_UART_MspInit+0xc0>)
 80007f2:	f000 fabf 	bl	8000d74 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2105      	movs	r1, #5
 80007fa:	2027      	movs	r0, #39	; 0x27
 80007fc:	f000 f9c5 	bl	8000b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000800:	2027      	movs	r0, #39	; 0x27
 8000802:	f000 f9dc 	bl	8000bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000806:	bf00      	nop
 8000808:	3768      	adds	r7, #104	; 0x68
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40004800 	.word	0x40004800
 8000814:	40021000 	.word	0x40021000
 8000818:	48000400 	.word	0x48000400

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000820:	f001 f9d6 	bl	8001bd0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000824:	e7fe      	b.n	8000824 <NMI_Handler+0x8>

08000826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler+0x4>

08000832 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <UsageFault_Handler+0x4>

0800083e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000850:	f000 f8a2 	bl	8000998 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000854:	f004 fb0e 	bl	8004e74 <xTaskGetSchedulerState>
 8000858:	4603      	mov	r3, r0
 800085a:	2b01      	cmp	r3, #1
 800085c:	d001      	beq.n	8000862 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800085e:	f005 f8f3 	bl	8005a48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800086c:	4802      	ldr	r0, [pc, #8]	; (8000878 <USART3_IRQHandler+0x10>)
 800086e:	f001 fc51 	bl	8002114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2000002c 	.word	0x2000002c

0800087c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <SystemInit+0x20>)
 8000882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000886:	4a05      	ldr	r2, [pc, #20]	; (800089c <SystemInit+0x20>)
 8000888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800088c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008a2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008a4:	f7ff ffea 	bl	800087c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <LoopForever+0x6>)
  ldr r1, =_edata
 80008aa:	490d      	ldr	r1, [pc, #52]	; (80008e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <LoopForever+0xe>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c0:	4c0a      	ldr	r4, [pc, #40]	; (80008ec <LoopForever+0x16>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80008ce:	f005 fb3d 	bl	8005f4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008d2:	f7ff fe23 	bl	800051c <main>

080008d6 <LoopForever>:

LoopForever:
    b LoopForever
 80008d6:	e7fe      	b.n	80008d6 <LoopForever>
  ldr   r0, =_estack
 80008d8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008e4:	08006060 	.word	0x08006060
  ldr r2, =_sbss
 80008e8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008ec:	20001a18 	.word	0x20001a18

080008f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC1_2_IRQHandler>

080008f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008f8:	2300      	movs	r3, #0
 80008fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f000 f939 	bl	8000b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000902:	200f      	movs	r0, #15
 8000904:	f000 f80e 	bl	8000924 <HAL_InitTick>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	71fb      	strb	r3, [r7, #7]
 8000912:	e001      	b.n	8000918 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000914:	f7ff fef6 	bl	8000704 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000918:	79fb      	ldrb	r3, [r7, #7]

}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800092c:	2300      	movs	r3, #0
 800092e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000930:	4b16      	ldr	r3, [pc, #88]	; (800098c <HAL_InitTick+0x68>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d022      	beq.n	800097e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_InitTick+0x6c>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <HAL_InitTick+0x68>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000944:	fbb1 f3f3 	udiv	r3, r1, r3
 8000948:	fbb2 f3f3 	udiv	r3, r2, r3
 800094c:	4618      	mov	r0, r3
 800094e:	f000 f944 	bl	8000bda <HAL_SYSTICK_Config>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d10f      	bne.n	8000978 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b0f      	cmp	r3, #15
 800095c:	d809      	bhi.n	8000972 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800095e:	2200      	movs	r2, #0
 8000960:	6879      	ldr	r1, [r7, #4]
 8000962:	f04f 30ff 	mov.w	r0, #4294967295
 8000966:	f000 f910 	bl	8000b8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <HAL_InitTick+0x70>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	e007      	b.n	8000982 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	73fb      	strb	r3, [r7, #15]
 8000976:	e004      	b.n	8000982 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000978:	2301      	movs	r3, #1
 800097a:	73fb      	strb	r3, [r7, #15]
 800097c:	e001      	b.n	8000982 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000982:	7bfb      	ldrb	r3, [r7, #15]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000008 	.word	0x20000008
 8000990:	20000000 	.word	0x20000000
 8000994:	20000004 	.word	0x20000004

08000998 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <HAL_IncTick+0x1c>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_IncTick+0x20>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4413      	add	r3, r2
 80009a6:	4a03      	ldr	r2, [pc, #12]	; (80009b4 <HAL_IncTick+0x1c>)
 80009a8:	6013      	str	r3, [r2, #0]
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	200000c4 	.word	0x200000c4
 80009b8:	20000008 	.word	0x20000008

080009bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return uwTick;
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <HAL_GetTick+0x14>)
 80009c2:	681b      	ldr	r3, [r3, #0]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	200000c4 	.word	0x200000c4

080009d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <__NVIC_GetPriorityGrouping+0x18>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	f003 0307 	and.w	r3, r3, #7
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	db0b      	blt.n	8000a62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	f003 021f 	and.w	r2, r3, #31
 8000a50:	4907      	ldr	r1, [pc, #28]	; (8000a70 <__NVIC_EnableIRQ+0x38>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	095b      	lsrs	r3, r3, #5
 8000a58:	2001      	movs	r0, #1
 8000a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000e100 	.word	0xe000e100

08000a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	db0a      	blt.n	8000a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	490c      	ldr	r1, [pc, #48]	; (8000ac0 <__NVIC_SetPriority+0x4c>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	0112      	lsls	r2, r2, #4
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	440b      	add	r3, r1
 8000a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a9c:	e00a      	b.n	8000ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4908      	ldr	r1, [pc, #32]	; (8000ac4 <__NVIC_SetPriority+0x50>)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	f003 030f 	and.w	r3, r3, #15
 8000aaa:	3b04      	subs	r3, #4
 8000aac:	0112      	lsls	r2, r2, #4
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	440b      	add	r3, r1
 8000ab2:	761a      	strb	r2, [r3, #24]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000e100 	.word	0xe000e100
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b089      	sub	sp, #36	; 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	f1c3 0307 	rsb	r3, r3, #7
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	bf28      	it	cs
 8000ae6:	2304      	movcs	r3, #4
 8000ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3304      	adds	r3, #4
 8000aee:	2b06      	cmp	r3, #6
 8000af0:	d902      	bls.n	8000af8 <NVIC_EncodePriority+0x30>
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3b03      	subs	r3, #3
 8000af6:	e000      	b.n	8000afa <NVIC_EncodePriority+0x32>
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	f04f 32ff 	mov.w	r2, #4294967295
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43da      	mvns	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b10:	f04f 31ff 	mov.w	r1, #4294967295
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	43d9      	mvns	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	4313      	orrs	r3, r2
         );
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3724      	adds	r7, #36	; 0x24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b40:	d301      	bcc.n	8000b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00f      	b.n	8000b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <SysTick_Config+0x40>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4e:	210f      	movs	r1, #15
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f7ff ff8e 	bl	8000a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <SysTick_Config+0x40>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5e:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <SysTick_Config+0x40>)
 8000b60:	2207      	movs	r2, #7
 8000b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	e000e010 	.word	0xe000e010

08000b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff ff29 	bl	80009d4 <__NVIC_SetPriorityGrouping>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
 8000b96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b98:	f7ff ff40 	bl	8000a1c <__NVIC_GetPriorityGrouping>
 8000b9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	6978      	ldr	r0, [r7, #20]
 8000ba4:	f7ff ff90 	bl	8000ac8 <NVIC_EncodePriority>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff5f 	bl	8000a74 <__NVIC_SetPriority>
}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff33 	bl	8000a38 <__NVIC_EnableIRQ>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ffa4 	bl	8000b30 <SysTick_Config>
 8000be8:	4603      	mov	r3, r0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b085      	sub	sp, #20
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d005      	beq.n	8000c16 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	73fb      	strb	r3, [r7, #15]
 8000c14:	e037      	b.n	8000c86 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f022 020e 	bic.w	r2, r2, #14
 8000c24:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c34:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 0201 	bic.w	r2, r2, #1
 8000c44:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f003 021f 	and.w	r2, r3, #31
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	2101      	movs	r1, #1
 8000c54:	fa01 f202 	lsl.w	r2, r1, r2
 8000c58:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000c62:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d00c      	beq.n	8000c86 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c7a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000c84:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d00d      	beq.n	8000cd8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2204      	movs	r2, #4
 8000cc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	73fb      	strb	r3, [r7, #15]
 8000cd6:	e047      	b.n	8000d68 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f022 020e 	bic.w	r2, r2, #14
 8000ce6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f022 0201 	bic.w	r2, r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0c:	f003 021f 	and.w	r2, r3, #31
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	2101      	movs	r1, #1
 8000d16:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000d24:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d00c      	beq.n	8000d48 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d3c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000d46:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	4798      	blx	r3
    }
  }
  return status;
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d82:	e15a      	b.n	800103a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	2101      	movs	r1, #1
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 814c 	beq.w	8001034 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d005      	beq.n	8000db4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d130      	bne.n	8000e16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dea:	2201      	movs	r2, #1
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	091b      	lsrs	r3, r3, #4
 8000e00:	f003 0201 	and.w	r2, r3, #1
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d017      	beq.n	8000e52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d123      	bne.n	8000ea6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	08da      	lsrs	r2, r3, #3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3208      	adds	r2, #8
 8000e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	220f      	movs	r2, #15
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	691a      	ldr	r2, [r3, #16]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	08da      	lsrs	r2, r3, #3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3208      	adds	r2, #8
 8000ea0:	6939      	ldr	r1, [r7, #16]
 8000ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0203 	and.w	r2, r3, #3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 80a6 	beq.w	8001034 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee8:	4b5b      	ldr	r3, [pc, #364]	; (8001058 <HAL_GPIO_Init+0x2e4>)
 8000eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eec:	4a5a      	ldr	r2, [pc, #360]	; (8001058 <HAL_GPIO_Init+0x2e4>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ef4:	4b58      	ldr	r3, [pc, #352]	; (8001058 <HAL_GPIO_Init+0x2e4>)
 8000ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f00:	4a56      	ldr	r2, [pc, #344]	; (800105c <HAL_GPIO_Init+0x2e8>)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	089b      	lsrs	r3, r3, #2
 8000f06:	3302      	adds	r3, #2
 8000f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	220f      	movs	r2, #15
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f2a:	d01f      	beq.n	8000f6c <HAL_GPIO_Init+0x1f8>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a4c      	ldr	r2, [pc, #304]	; (8001060 <HAL_GPIO_Init+0x2ec>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d019      	beq.n	8000f68 <HAL_GPIO_Init+0x1f4>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a4b      	ldr	r2, [pc, #300]	; (8001064 <HAL_GPIO_Init+0x2f0>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d013      	beq.n	8000f64 <HAL_GPIO_Init+0x1f0>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a4a      	ldr	r2, [pc, #296]	; (8001068 <HAL_GPIO_Init+0x2f4>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d00d      	beq.n	8000f60 <HAL_GPIO_Init+0x1ec>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a49      	ldr	r2, [pc, #292]	; (800106c <HAL_GPIO_Init+0x2f8>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d007      	beq.n	8000f5c <HAL_GPIO_Init+0x1e8>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a48      	ldr	r2, [pc, #288]	; (8001070 <HAL_GPIO_Init+0x2fc>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d101      	bne.n	8000f58 <HAL_GPIO_Init+0x1e4>
 8000f54:	2305      	movs	r3, #5
 8000f56:	e00a      	b.n	8000f6e <HAL_GPIO_Init+0x1fa>
 8000f58:	2306      	movs	r3, #6
 8000f5a:	e008      	b.n	8000f6e <HAL_GPIO_Init+0x1fa>
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	e006      	b.n	8000f6e <HAL_GPIO_Init+0x1fa>
 8000f60:	2303      	movs	r3, #3
 8000f62:	e004      	b.n	8000f6e <HAL_GPIO_Init+0x1fa>
 8000f64:	2302      	movs	r3, #2
 8000f66:	e002      	b.n	8000f6e <HAL_GPIO_Init+0x1fa>
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e000      	b.n	8000f6e <HAL_GPIO_Init+0x1fa>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	f002 0203 	and.w	r2, r2, #3
 8000f74:	0092      	lsls	r2, r2, #2
 8000f76:	4093      	lsls	r3, r2
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f7e:	4937      	ldr	r1, [pc, #220]	; (800105c <HAL_GPIO_Init+0x2e8>)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f8c:	4b39      	ldr	r3, [pc, #228]	; (8001074 <HAL_GPIO_Init+0x300>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fb0:	4a30      	ldr	r2, [pc, #192]	; (8001074 <HAL_GPIO_Init+0x300>)
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fb6:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <HAL_GPIO_Init+0x300>)
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fda:	4a26      	ldr	r2, [pc, #152]	; (8001074 <HAL_GPIO_Init+0x300>)
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000fe0:	4b24      	ldr	r3, [pc, #144]	; (8001074 <HAL_GPIO_Init+0x300>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001004:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <HAL_GPIO_Init+0x300>)
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800100a:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <HAL_GPIO_Init+0x300>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800102e:	4a11      	ldr	r2, [pc, #68]	; (8001074 <HAL_GPIO_Init+0x300>)
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3301      	adds	r3, #1
 8001038:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	fa22 f303 	lsr.w	r3, r2, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	f47f ae9d 	bne.w	8000d84 <HAL_GPIO_Init+0x10>
  }
}
 800104a:	bf00      	nop
 800104c:	bf00      	nop
 800104e:	371c      	adds	r7, #28
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	40021000 	.word	0x40021000
 800105c:	40010000 	.word	0x40010000
 8001060:	48000400 	.word	0x48000400
 8001064:	48000800 	.word	0x48000800
 8001068:	48000c00 	.word	0x48000c00
 800106c:	48001000 	.word	0x48001000
 8001070:	48001400 	.word	0x48001400
 8001074:	40010400 	.word	0x40010400

08001078 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d141      	bne.n	800110a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001086:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800108e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001092:	d131      	bne.n	80010f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001094:	4b47      	ldr	r3, [pc, #284]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800109a:	4a46      	ldr	r2, [pc, #280]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800109c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a4:	4b43      	ldr	r3, [pc, #268]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010ac:	4a41      	ldr	r2, [pc, #260]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010b4:	4b40      	ldr	r3, [pc, #256]	; (80011b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2232      	movs	r2, #50	; 0x32
 80010ba:	fb02 f303 	mul.w	r3, r2, r3
 80010be:	4a3f      	ldr	r2, [pc, #252]	; (80011bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010c0:	fba2 2303 	umull	r2, r3, r2, r3
 80010c4:	0c9b      	lsrs	r3, r3, #18
 80010c6:	3301      	adds	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010ca:	e002      	b.n	80010d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010d2:	4b38      	ldr	r3, [pc, #224]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010de:	d102      	bne.n	80010e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f2      	bne.n	80010cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010e6:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010f2:	d158      	bne.n	80011a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e057      	b.n	80011a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010f8:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010fe:	4a2d      	ldr	r2, [pc, #180]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001104:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001108:	e04d      	b.n	80011a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001110:	d141      	bne.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001112:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800111a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800111e:	d131      	bne.n	8001184 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001120:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001126:	4a23      	ldr	r2, [pc, #140]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001130:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001138:	4a1e      	ldr	r2, [pc, #120]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800113a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2232      	movs	r2, #50	; 0x32
 8001146:	fb02 f303 	mul.w	r3, r2, r3
 800114a:	4a1c      	ldr	r2, [pc, #112]	; (80011bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800114c:	fba2 2303 	umull	r2, r3, r2, r3
 8001150:	0c9b      	lsrs	r3, r3, #18
 8001152:	3301      	adds	r3, #1
 8001154:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001156:	e002      	b.n	800115e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	3b01      	subs	r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800116a:	d102      	bne.n	8001172 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f2      	bne.n	8001158 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800117a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800117e:	d112      	bne.n	80011a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e011      	b.n	80011a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800118c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001190:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001194:	e007      	b.n	80011a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	40007000 	.word	0x40007000
 80011b8:	20000000 	.word	0x20000000
 80011bc:	431bde83 	.word	0x431bde83

080011c0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ce:	6093      	str	r3, [r2, #8]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40007000 	.word	0x40007000

080011e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e2fe      	b.n	80017f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d075      	beq.n	80012ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011fe:	4b97      	ldr	r3, [pc, #604]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001208:	4b94      	ldr	r3, [pc, #592]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	2b0c      	cmp	r3, #12
 8001216:	d102      	bne.n	800121e <HAL_RCC_OscConfig+0x3e>
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	2b03      	cmp	r3, #3
 800121c:	d002      	beq.n	8001224 <HAL_RCC_OscConfig+0x44>
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	2b08      	cmp	r3, #8
 8001222:	d10b      	bne.n	800123c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001224:	4b8d      	ldr	r3, [pc, #564]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d05b      	beq.n	80012e8 <HAL_RCC_OscConfig+0x108>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d157      	bne.n	80012e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e2d9      	b.n	80017f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001244:	d106      	bne.n	8001254 <HAL_RCC_OscConfig+0x74>
 8001246:	4b85      	ldr	r3, [pc, #532]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a84      	ldr	r2, [pc, #528]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 800124c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e01d      	b.n	8001290 <HAL_RCC_OscConfig+0xb0>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0x98>
 800125e:	4b7f      	ldr	r3, [pc, #508]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a7e      	ldr	r2, [pc, #504]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 8001264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b7c      	ldr	r3, [pc, #496]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a7b      	ldr	r2, [pc, #492]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 8001270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e00b      	b.n	8001290 <HAL_RCC_OscConfig+0xb0>
 8001278:	4b78      	ldr	r3, [pc, #480]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a77      	ldr	r2, [pc, #476]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 800127e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b75      	ldr	r3, [pc, #468]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a74      	ldr	r2, [pc, #464]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 800128a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d013      	beq.n	80012c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001298:	f7ff fb90 	bl	80009bc <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff fb8c 	bl	80009bc <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	; 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e29e      	b.n	80017f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012b2:	4b6a      	ldr	r3, [pc, #424]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0xc0>
 80012be:	e014      	b.n	80012ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff fb7c 	bl	80009bc <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fb78 	bl	80009bc <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e28a      	b.n	80017f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012da:	4b60      	ldr	r3, [pc, #384]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0xe8>
 80012e6:	e000      	b.n	80012ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d075      	beq.n	80013e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012f6:	4b59      	ldr	r3, [pc, #356]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001300:	4b56      	ldr	r3, [pc, #344]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	2b0c      	cmp	r3, #12
 800130e:	d102      	bne.n	8001316 <HAL_RCC_OscConfig+0x136>
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d002      	beq.n	800131c <HAL_RCC_OscConfig+0x13c>
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	2b04      	cmp	r3, #4
 800131a:	d11f      	bne.n	800135c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800131c:	4b4f      	ldr	r3, [pc, #316]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <HAL_RCC_OscConfig+0x154>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e25d      	b.n	80017f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001334:	4b49      	ldr	r3, [pc, #292]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	061b      	lsls	r3, r3, #24
 8001342:	4946      	ldr	r1, [pc, #280]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001348:	4b45      	ldr	r3, [pc, #276]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fae9 	bl	8000924 <HAL_InitTick>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d043      	beq.n	80013e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e249      	b.n	80017f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d023      	beq.n	80013ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001364:	4b3d      	ldr	r3, [pc, #244]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a3c      	ldr	r2, [pc, #240]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 800136a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fb24 	bl	80009bc <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001378:	f7ff fb20 	bl	80009bc <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e232      	b.n	80017f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800138a:	4b34      	ldr	r3, [pc, #208]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b31      	ldr	r3, [pc, #196]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	061b      	lsls	r3, r3, #24
 80013a4:	492d      	ldr	r1, [pc, #180]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	604b      	str	r3, [r1, #4]
 80013aa:	e01a      	b.n	80013e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ac:	4b2b      	ldr	r3, [pc, #172]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a2a      	ldr	r2, [pc, #168]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 80013b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fb00 	bl	80009bc <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c0:	f7ff fafc 	bl	80009bc <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e20e      	b.n	80017f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013d2:	4b22      	ldr	r3, [pc, #136]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x1e0>
 80013de:	e000      	b.n	80013e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d041      	beq.n	8001472 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d01c      	beq.n	8001430 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 80013f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013fc:	4a17      	ldr	r2, [pc, #92]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001406:	f7ff fad9 	bl	80009bc <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800140e:	f7ff fad5 	bl	80009bc <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e1e7      	b.n	80017f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 8001422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0ef      	beq.n	800140e <HAL_RCC_OscConfig+0x22e>
 800142e:	e020      	b.n	8001472 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 8001432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001436:	4a09      	ldr	r2, [pc, #36]	; (800145c <HAL_RCC_OscConfig+0x27c>)
 8001438:	f023 0301 	bic.w	r3, r3, #1
 800143c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001440:	f7ff fabc 	bl	80009bc <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001446:	e00d      	b.n	8001464 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001448:	f7ff fab8 	bl	80009bc <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d906      	bls.n	8001464 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e1ca      	b.n	80017f0 <HAL_RCC_OscConfig+0x610>
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000
 8001460:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001464:	4b8c      	ldr	r3, [pc, #560]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 8001466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1ea      	bne.n	8001448 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 80a6 	beq.w	80015cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001484:	4b84      	ldr	r3, [pc, #528]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 8001486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_RCC_OscConfig+0x2b4>
 8001490:	2301      	movs	r3, #1
 8001492:	e000      	b.n	8001496 <HAL_RCC_OscConfig+0x2b6>
 8001494:	2300      	movs	r3, #0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00d      	beq.n	80014b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	4b7f      	ldr	r3, [pc, #508]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 800149c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149e:	4a7e      	ldr	r2, [pc, #504]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a4:	6593      	str	r3, [r2, #88]	; 0x58
 80014a6:	4b7c      	ldr	r3, [pc, #496]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014b2:	2301      	movs	r3, #1
 80014b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014b6:	4b79      	ldr	r3, [pc, #484]	; (800169c <HAL_RCC_OscConfig+0x4bc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d118      	bne.n	80014f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014c2:	4b76      	ldr	r3, [pc, #472]	; (800169c <HAL_RCC_OscConfig+0x4bc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a75      	ldr	r2, [pc, #468]	; (800169c <HAL_RCC_OscConfig+0x4bc>)
 80014c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fa75 	bl	80009bc <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d6:	f7ff fa71 	bl	80009bc <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e183      	b.n	80017f0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e8:	4b6c      	ldr	r3, [pc, #432]	; (800169c <HAL_RCC_OscConfig+0x4bc>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d108      	bne.n	800150e <HAL_RCC_OscConfig+0x32e>
 80014fc:	4b66      	ldr	r3, [pc, #408]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 80014fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001502:	4a65      	ldr	r2, [pc, #404]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800150c:	e024      	b.n	8001558 <HAL_RCC_OscConfig+0x378>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b05      	cmp	r3, #5
 8001514:	d110      	bne.n	8001538 <HAL_RCC_OscConfig+0x358>
 8001516:	4b60      	ldr	r3, [pc, #384]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 8001518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151c:	4a5e      	ldr	r2, [pc, #376]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001526:	4b5c      	ldr	r3, [pc, #368]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 8001528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152c:	4a5a      	ldr	r2, [pc, #360]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001536:	e00f      	b.n	8001558 <HAL_RCC_OscConfig+0x378>
 8001538:	4b57      	ldr	r3, [pc, #348]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 800153a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153e:	4a56      	ldr	r2, [pc, #344]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 8001540:	f023 0301 	bic.w	r3, r3, #1
 8001544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001548:	4b53      	ldr	r3, [pc, #332]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 800154a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800154e:	4a52      	ldr	r2, [pc, #328]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 8001550:	f023 0304 	bic.w	r3, r3, #4
 8001554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d016      	beq.n	800158e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7ff fa2c 	bl	80009bc <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001566:	e00a      	b.n	800157e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001568:	f7ff fa28 	bl	80009bc <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	; 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e138      	b.n	80017f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800157e:	4b46      	ldr	r3, [pc, #280]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 8001580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0ed      	beq.n	8001568 <HAL_RCC_OscConfig+0x388>
 800158c:	e015      	b.n	80015ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158e:	f7ff fa15 	bl	80009bc <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001594:	e00a      	b.n	80015ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001596:	f7ff fa11 	bl	80009bc <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e121      	b.n	80017f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015ac:	4b3a      	ldr	r3, [pc, #232]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 80015ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1ed      	bne.n	8001596 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015ba:	7ffb      	ldrb	r3, [r7, #31]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d105      	bne.n	80015cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c0:	4b35      	ldr	r3, [pc, #212]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c4:	4a34      	ldr	r2, [pc, #208]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 80015c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0320 	and.w	r3, r3, #32
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d03c      	beq.n	8001652 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d01c      	beq.n	800161a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 80015e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015e6:	4a2c      	ldr	r2, [pc, #176]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff f9e4 	bl	80009bc <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015f8:	f7ff f9e0 	bl	80009bc <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e0f2      	b.n	80017f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800160a:	4b23      	ldr	r3, [pc, #140]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 800160c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0ef      	beq.n	80015f8 <HAL_RCC_OscConfig+0x418>
 8001618:	e01b      	b.n	8001652 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 800161c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001620:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162a:	f7ff f9c7 	bl	80009bc <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001632:	f7ff f9c3 	bl	80009bc <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e0d5      	b.n	80017f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 8001646:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1ef      	bne.n	8001632 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 80c9 	beq.w	80017ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b0c      	cmp	r3, #12
 8001666:	f000 8083 	beq.w	8001770 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d15e      	bne.n	8001730 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a08      	ldr	r2, [pc, #32]	; (8001698 <HAL_RCC_OscConfig+0x4b8>)
 8001678:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800167c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167e:	f7ff f99d 	bl	80009bc <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001684:	e00c      	b.n	80016a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001686:	f7ff f999 	bl	80009bc <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d905      	bls.n	80016a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e0ab      	b.n	80017f0 <HAL_RCC_OscConfig+0x610>
 8001698:	40021000 	.word	0x40021000
 800169c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016a0:	4b55      	ldr	r3, [pc, #340]	; (80017f8 <HAL_RCC_OscConfig+0x618>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1ec      	bne.n	8001686 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ac:	4b52      	ldr	r3, [pc, #328]	; (80017f8 <HAL_RCC_OscConfig+0x618>)
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	4b52      	ldr	r3, [pc, #328]	; (80017fc <HAL_RCC_OscConfig+0x61c>)
 80016b2:	4013      	ands	r3, r2
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6a11      	ldr	r1, [r2, #32]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016bc:	3a01      	subs	r2, #1
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	4311      	orrs	r1, r2
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80016c6:	0212      	lsls	r2, r2, #8
 80016c8:	4311      	orrs	r1, r2
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016ce:	0852      	lsrs	r2, r2, #1
 80016d0:	3a01      	subs	r2, #1
 80016d2:	0552      	lsls	r2, r2, #21
 80016d4:	4311      	orrs	r1, r2
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016da:	0852      	lsrs	r2, r2, #1
 80016dc:	3a01      	subs	r2, #1
 80016de:	0652      	lsls	r2, r2, #25
 80016e0:	4311      	orrs	r1, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016e6:	06d2      	lsls	r2, r2, #27
 80016e8:	430a      	orrs	r2, r1
 80016ea:	4943      	ldr	r1, [pc, #268]	; (80017f8 <HAL_RCC_OscConfig+0x618>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f0:	4b41      	ldr	r3, [pc, #260]	; (80017f8 <HAL_RCC_OscConfig+0x618>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a40      	ldr	r2, [pc, #256]	; (80017f8 <HAL_RCC_OscConfig+0x618>)
 80016f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016fc:	4b3e      	ldr	r3, [pc, #248]	; (80017f8 <HAL_RCC_OscConfig+0x618>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4a3d      	ldr	r2, [pc, #244]	; (80017f8 <HAL_RCC_OscConfig+0x618>)
 8001702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001706:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff f958 	bl	80009bc <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001710:	f7ff f954 	bl	80009bc <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e066      	b.n	80017f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001722:	4b35      	ldr	r3, [pc, #212]	; (80017f8 <HAL_RCC_OscConfig+0x618>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f0      	beq.n	8001710 <HAL_RCC_OscConfig+0x530>
 800172e:	e05e      	b.n	80017ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001730:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <HAL_RCC_OscConfig+0x618>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a30      	ldr	r2, [pc, #192]	; (80017f8 <HAL_RCC_OscConfig+0x618>)
 8001736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800173a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7ff f93e 	bl	80009bc <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001744:	f7ff f93a 	bl	80009bc <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e04c      	b.n	80017f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001756:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <HAL_RCC_OscConfig+0x618>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001762:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <HAL_RCC_OscConfig+0x618>)
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	4924      	ldr	r1, [pc, #144]	; (80017f8 <HAL_RCC_OscConfig+0x618>)
 8001768:	4b25      	ldr	r3, [pc, #148]	; (8001800 <HAL_RCC_OscConfig+0x620>)
 800176a:	4013      	ands	r3, r2
 800176c:	60cb      	str	r3, [r1, #12]
 800176e:	e03e      	b.n	80017ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e039      	b.n	80017f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800177c:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <HAL_RCC_OscConfig+0x618>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f003 0203 	and.w	r2, r3, #3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	429a      	cmp	r2, r3
 800178e:	d12c      	bne.n	80017ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	3b01      	subs	r3, #1
 800179c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179e:	429a      	cmp	r2, r3
 80017a0:	d123      	bne.n	80017ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d11b      	bne.n	80017ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d113      	bne.n	80017ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	085b      	lsrs	r3, r3, #1
 80017ce:	3b01      	subs	r3, #1
 80017d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d109      	bne.n	80017ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e0:	085b      	lsrs	r3, r3, #1
 80017e2:	3b01      	subs	r3, #1
 80017e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d001      	beq.n	80017ee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40021000 	.word	0x40021000
 80017fc:	019f800c 	.word	0x019f800c
 8001800:	feeefffc 	.word	0xfeeefffc

08001804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e11e      	b.n	8001a5a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800181c:	4b91      	ldr	r3, [pc, #580]	; (8001a64 <HAL_RCC_ClockConfig+0x260>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d910      	bls.n	800184c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182a:	4b8e      	ldr	r3, [pc, #568]	; (8001a64 <HAL_RCC_ClockConfig+0x260>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 020f 	bic.w	r2, r3, #15
 8001832:	498c      	ldr	r1, [pc, #560]	; (8001a64 <HAL_RCC_ClockConfig+0x260>)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800183a:	4b8a      	ldr	r3, [pc, #552]	; (8001a64 <HAL_RCC_ClockConfig+0x260>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d001      	beq.n	800184c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e106      	b.n	8001a5a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d073      	beq.n	8001940 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b03      	cmp	r3, #3
 800185e:	d129      	bne.n	80018b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001860:	4b81      	ldr	r3, [pc, #516]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0f4      	b.n	8001a5a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001870:	f000 f9ca 	bl	8001c08 <RCC_GetSysClockFreqFromPLLSource>
 8001874:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4a7c      	ldr	r2, [pc, #496]	; (8001a6c <HAL_RCC_ClockConfig+0x268>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d93f      	bls.n	80018fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800187e:	4b7a      	ldr	r3, [pc, #488]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001892:	2b00      	cmp	r3, #0
 8001894:	d033      	beq.n	80018fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800189a:	2b00      	cmp	r3, #0
 800189c:	d12f      	bne.n	80018fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800189e:	4b72      	ldr	r3, [pc, #456]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018a6:	4a70      	ldr	r2, [pc, #448]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 80018a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	e024      	b.n	80018fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d107      	bne.n	80018cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018bc:	4b6a      	ldr	r3, [pc, #424]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d109      	bne.n	80018dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0c6      	b.n	8001a5a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018cc:	4b66      	ldr	r3, [pc, #408]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0be      	b.n	8001a5a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80018dc:	f000 f8ce 	bl	8001a7c <HAL_RCC_GetSysClockFreq>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4a61      	ldr	r2, [pc, #388]	; (8001a6c <HAL_RCC_ClockConfig+0x268>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d909      	bls.n	80018fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018ea:	4b5f      	ldr	r3, [pc, #380]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018f2:	4a5d      	ldr	r2, [pc, #372]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 80018f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018fe:	4b5a      	ldr	r3, [pc, #360]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f023 0203 	bic.w	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	4957      	ldr	r1, [pc, #348]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 800190c:	4313      	orrs	r3, r2
 800190e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001910:	f7ff f854 	bl	80009bc <HAL_GetTick>
 8001914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	e00a      	b.n	800192e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001918:	f7ff f850 	bl	80009bc <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	; 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e095      	b.n	8001a5a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192e:	4b4e      	ldr	r3, [pc, #312]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 020c 	and.w	r2, r3, #12
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	429a      	cmp	r2, r3
 800193e:	d1eb      	bne.n	8001918 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d023      	beq.n	8001994 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001958:	4b43      	ldr	r3, [pc, #268]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	4a42      	ldr	r2, [pc, #264]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 800195e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001962:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d007      	beq.n	8001980 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001970:	4b3d      	ldr	r3, [pc, #244]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001978:	4a3b      	ldr	r2, [pc, #236]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 800197a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800197e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001980:	4b39      	ldr	r3, [pc, #228]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4936      	ldr	r1, [pc, #216]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
 8001992:	e008      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	2b80      	cmp	r3, #128	; 0x80
 8001998:	d105      	bne.n	80019a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800199a:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	4a32      	ldr	r2, [pc, #200]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 80019a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019a6:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <HAL_RCC_ClockConfig+0x260>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d21d      	bcs.n	80019f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b4:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <HAL_RCC_ClockConfig+0x260>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f023 020f 	bic.w	r2, r3, #15
 80019bc:	4929      	ldr	r1, [pc, #164]	; (8001a64 <HAL_RCC_ClockConfig+0x260>)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019c4:	f7fe fffa 	bl	80009bc <HAL_GetTick>
 80019c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	e00a      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019cc:	f7fe fff6 	bl	80009bc <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e03b      	b.n	8001a5a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_RCC_ClockConfig+0x260>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d1ed      	bne.n	80019cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019fc:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	4917      	ldr	r1, [pc, #92]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d009      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	490f      	ldr	r1, [pc, #60]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a2e:	f000 f825 	bl	8001a7c <HAL_RCC_GetSysClockFreq>
 8001a32:	4602      	mov	r2, r0
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <HAL_RCC_ClockConfig+0x264>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	490c      	ldr	r1, [pc, #48]	; (8001a70 <HAL_RCC_ClockConfig+0x26c>)
 8001a40:	5ccb      	ldrb	r3, [r1, r3]
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <HAL_RCC_ClockConfig+0x270>)
 8001a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_RCC_ClockConfig+0x274>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe ff66 	bl	8000924 <HAL_InitTick>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40022000 	.word	0x40022000
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	04c4b400 	.word	0x04c4b400
 8001a70:	08006010 	.word	0x08006010
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000004 	.word	0x20000004

08001a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b087      	sub	sp, #28
 8001a80:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a82:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d102      	bne.n	8001a94 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a8e:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	e047      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a94:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d102      	bne.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001aa0:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	e03e      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001aa6:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b0c      	cmp	r3, #12
 8001ab0:	d136      	bne.n	8001b20 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ab2:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001abc:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d10c      	bne.n	8001aea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ad0:	4a1a      	ldr	r2, [pc, #104]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad8:	4a16      	ldr	r2, [pc, #88]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ada:	68d2      	ldr	r2, [r2, #12]
 8001adc:	0a12      	lsrs	r2, r2, #8
 8001ade:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ae2:	fb02 f303 	mul.w	r3, r2, r3
 8001ae6:	617b      	str	r3, [r7, #20]
      break;
 8001ae8:	e00c      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001aea:	4a13      	ldr	r2, [pc, #76]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af2:	4a10      	ldr	r2, [pc, #64]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001af4:	68d2      	ldr	r2, [r2, #12]
 8001af6:	0a12      	lsrs	r2, r2, #8
 8001af8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001afc:	fb02 f303 	mul.w	r3, r2, r3
 8001b00:	617b      	str	r3, [r7, #20]
      break;
 8001b02:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	0e5b      	lsrs	r3, r3, #25
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	e001      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b24:	693b      	ldr	r3, [r7, #16]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	371c      	adds	r7, #28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	00f42400 	.word	0x00f42400
 8001b3c:	016e3600 	.word	0x016e3600

08001b40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000000 	.word	0x20000000

08001b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b5c:	f7ff fff0 	bl	8001b40 <HAL_RCC_GetHCLKFreq>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	4904      	ldr	r1, [pc, #16]	; (8001b80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	f003 031f 	and.w	r3, r3, #31
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	08006020 	.word	0x08006020

08001b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b88:	f7ff ffda 	bl	8001b40 <HAL_RCC_GetHCLKFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	0adb      	lsrs	r3, r3, #11
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	4904      	ldr	r1, [pc, #16]	; (8001bac <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	f003 031f 	and.w	r3, r3, #31
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	08006020 	.word	0x08006020

08001bb0 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_RCC_EnableCSS+0x1c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <HAL_RCC_EnableCSS+0x1c>)
 8001bba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bbe:	6013      	str	r3, [r2, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000

08001bd0 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be0:	d105      	bne.n	8001bee <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001be2:	f000 f809 	bl	8001bf8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001be6:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bec:	621a      	str	r2, [r3, #32]
  }
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c18:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	3301      	adds	r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d10c      	bne.n	8001c46 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c2c:	4a17      	ldr	r2, [pc, #92]	; (8001c8c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c34:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c36:	68d2      	ldr	r2, [r2, #12]
 8001c38:	0a12      	lsrs	r2, r2, #8
 8001c3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c3e:	fb02 f303 	mul.w	r3, r2, r3
 8001c42:	617b      	str	r3, [r7, #20]
    break;
 8001c44:	e00c      	b.n	8001c60 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	; (8001c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c50:	68d2      	ldr	r2, [r2, #12]
 8001c52:	0a12      	lsrs	r2, r2, #8
 8001c54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c58:	fb02 f303 	mul.w	r3, r2, r3
 8001c5c:	617b      	str	r3, [r7, #20]
    break;
 8001c5e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	0e5b      	lsrs	r3, r3, #25
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c78:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001c7a:	687b      	ldr	r3, [r7, #4]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	371c      	adds	r7, #28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	016e3600 	.word	0x016e3600
 8001c90:	00f42400 	.word	0x00f42400

08001c94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 8098 	beq.w	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb6:	4b43      	ldr	r3, [pc, #268]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10d      	bne.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	4b40      	ldr	r3, [pc, #256]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	4a3f      	ldr	r2, [pc, #252]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	6593      	str	r3, [r2, #88]	; 0x58
 8001cce:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cde:	4b3a      	ldr	r3, [pc, #232]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a39      	ldr	r2, [pc, #228]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cea:	f7fe fe67 	bl	80009bc <HAL_GetTick>
 8001cee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cf0:	e009      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf2:	f7fe fe63 	bl	80009bc <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d902      	bls.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	74fb      	strb	r3, [r7, #19]
        break;
 8001d04:	e005      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d06:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0ef      	beq.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001d12:	7cfb      	ldrb	r3, [r7, #19]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d159      	bne.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d18:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d22:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d01e      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d019      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d34:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d40:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d46:	4a1f      	ldr	r2, [pc, #124]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d50:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d56:	4a1b      	ldr	r2, [pc, #108]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d60:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d016      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7fe fe23 	bl	80009bc <HAL_GetTick>
 8001d76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d78:	e00b      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7a:	f7fe fe1f 	bl	80009bc <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d902      	bls.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	74fb      	strb	r3, [r7, #19]
            break;
 8001d90:	e006      	b.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0ec      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001da0:	7cfb      	ldrb	r3, [r7, #19]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10b      	bne.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	4903      	ldr	r1, [pc, #12]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001dbe:	7cfb      	ldrb	r3, [r7, #19]
 8001dc0:	74bb      	strb	r3, [r7, #18]
 8001dc2:	e005      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dcc:	7cfb      	ldrb	r3, [r7, #19]
 8001dce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dd0:	7c7b      	ldrb	r3, [r7, #17]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d105      	bne.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd6:	4ba6      	ldr	r3, [pc, #664]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dda:	4aa5      	ldr	r2, [pc, #660]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00a      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dee:	4ba0      	ldr	r3, [pc, #640]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df4:	f023 0203 	bic.w	r2, r3, #3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	499c      	ldr	r1, [pc, #624]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00a      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e10:	4b97      	ldr	r3, [pc, #604]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e16:	f023 020c 	bic.w	r2, r3, #12
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	4994      	ldr	r1, [pc, #592]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00a      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e32:	4b8f      	ldr	r3, [pc, #572]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	498b      	ldr	r1, [pc, #556]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00a      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e54:	4b86      	ldr	r3, [pc, #536]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	4983      	ldr	r1, [pc, #524]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0320 	and.w	r3, r3, #32
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00a      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e76:	4b7e      	ldr	r3, [pc, #504]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	497a      	ldr	r1, [pc, #488]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00a      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e98:	4b75      	ldr	r3, [pc, #468]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	4972      	ldr	r1, [pc, #456]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00a      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001eba:	4b6d      	ldr	r3, [pc, #436]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	4969      	ldr	r1, [pc, #420]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001edc:	4b64      	ldr	r3, [pc, #400]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4961      	ldr	r1, [pc, #388]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00a      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001efe:	4b5c      	ldr	r3, [pc, #368]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	4958      	ldr	r1, [pc, #352]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d015      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f20:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	4950      	ldr	r1, [pc, #320]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f3e:	d105      	bne.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f40:	4b4b      	ldr	r3, [pc, #300]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	4a4a      	ldr	r2, [pc, #296]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f4a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d015      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f58:	4b45      	ldr	r3, [pc, #276]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	4942      	ldr	r1, [pc, #264]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f76:	d105      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f78:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4a3c      	ldr	r2, [pc, #240]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f82:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d015      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f90:	4b37      	ldr	r3, [pc, #220]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4934      	ldr	r1, [pc, #208]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fae:	d105      	bne.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fb0:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	4a2e      	ldr	r2, [pc, #184]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d015      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fc8:	4b29      	ldr	r3, [pc, #164]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd6:	4926      	ldr	r1, [pc, #152]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fe6:	d105      	bne.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fe8:	4b21      	ldr	r3, [pc, #132]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4a20      	ldr	r2, [pc, #128]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ff2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d015      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002000:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002006:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200e:	4918      	ldr	r1, [pc, #96]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800201e:	d105      	bne.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002020:	4b13      	ldr	r3, [pc, #76]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4a12      	ldr	r2, [pc, #72]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800202a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d015      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002046:	490a      	ldr	r1, [pc, #40]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002048:	4313      	orrs	r3, r2
 800204a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002056:	d105      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4a04      	ldr	r2, [pc, #16]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800205e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002062:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002064:	7cbb      	ldrb	r3, [r7, #18]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000

08002074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e042      	b.n	800210c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208c:	2b00      	cmp	r3, #0
 800208e:	d106      	bne.n	800209e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7fe fb5d 	bl	8000758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2224      	movs	r2, #36	; 0x24
 80020a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0201 	bic.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 fe38 	bl	8002d34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 fb69 	bl	800279c <UART_SetConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e01b      	b.n	800210c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 feb7 	bl	8002e78 <UART_CheckIdleState>
 800210a:	4603      	mov	r3, r0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b0ba      	sub	sp, #232	; 0xe8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800213a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800213e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002142:	4013      	ands	r3, r2
 8002144:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002148:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d11b      	bne.n	8002188 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b00      	cmp	r3, #0
 800215a:	d015      	beq.n	8002188 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800215c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002160:	f003 0320 	and.w	r3, r3, #32
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800216c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d009      	beq.n	8002188 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 82e3 	beq.w	8002744 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	4798      	blx	r3
      }
      return;
 8002186:	e2dd      	b.n	8002744 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002188:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 8123 	beq.w	80023d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002192:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002196:	4b8d      	ldr	r3, [pc, #564]	; (80023cc <HAL_UART_IRQHandler+0x2b8>)
 8002198:	4013      	ands	r3, r2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800219e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80021a2:	4b8b      	ldr	r3, [pc, #556]	; (80023d0 <HAL_UART_IRQHandler+0x2bc>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8116 	beq.w	80023d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80021ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d011      	beq.n	80021dc <HAL_UART_IRQHandler+0xc8>
 80021b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00b      	beq.n	80021dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2201      	movs	r2, #1
 80021ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d2:	f043 0201 	orr.w	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80021dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d011      	beq.n	800220c <HAL_UART_IRQHandler+0xf8>
 80021e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00b      	beq.n	800220c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2202      	movs	r2, #2
 80021fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	f043 0204 	orr.w	r2, r3, #4
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800220c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d011      	beq.n	800223c <HAL_UART_IRQHandler+0x128>
 8002218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00b      	beq.n	800223c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2204      	movs	r2, #4
 800222a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002232:	f043 0202 	orr.w	r2, r3, #2
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800223c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d017      	beq.n	8002278 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800224c:	f003 0320 	and.w	r3, r3, #32
 8002250:	2b00      	cmp	r3, #0
 8002252:	d105      	bne.n	8002260 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002254:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002258:	4b5c      	ldr	r3, [pc, #368]	; (80023cc <HAL_UART_IRQHandler+0x2b8>)
 800225a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00b      	beq.n	8002278 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2208      	movs	r2, #8
 8002266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226e:	f043 0208 	orr.w	r2, r3, #8
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800227c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002280:	2b00      	cmp	r3, #0
 8002282:	d012      	beq.n	80022aa <HAL_UART_IRQHandler+0x196>
 8002284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002288:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00c      	beq.n	80022aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002298:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a0:	f043 0220 	orr.w	r2, r3, #32
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 8249 	beq.w	8002748 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80022b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d013      	beq.n	80022ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80022c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022c6:	f003 0320 	and.w	r3, r3, #32
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80022ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d007      	beq.n	80022ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fe:	2b40      	cmp	r3, #64	; 0x40
 8002300:	d005      	beq.n	800230e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002306:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800230a:	2b00      	cmp	r3, #0
 800230c:	d054      	beq.n	80023b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fec9 	bl	80030a6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231e:	2b40      	cmp	r3, #64	; 0x40
 8002320:	d146      	bne.n	80023b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	3308      	adds	r3, #8
 8002328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800232c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002330:	e853 3f00 	ldrex	r3, [r3]
 8002334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002338:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800233c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3308      	adds	r3, #8
 800234a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800234e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002352:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002356:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800235a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800235e:	e841 2300 	strex	r3, r2, [r1]
 8002362:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1d9      	bne.n	8002322 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002374:	2b00      	cmp	r3, #0
 8002376:	d017      	beq.n	80023a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800237e:	4a15      	ldr	r2, [pc, #84]	; (80023d4 <HAL_UART_IRQHandler+0x2c0>)
 8002380:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe fc8b 	bl	8000ca4 <HAL_DMA_Abort_IT>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d019      	beq.n	80023c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800239a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80023a2:	4610      	mov	r0, r2
 80023a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a6:	e00f      	b.n	80023c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f9e1 	bl	8002770 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023ae:	e00b      	b.n	80023c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f9dd 	bl	8002770 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b6:	e007      	b.n	80023c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f9d9 	bl	8002770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80023c6:	e1bf      	b.n	8002748 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c8:	bf00      	nop
    return;
 80023ca:	e1bd      	b.n	8002748 <HAL_UART_IRQHandler+0x634>
 80023cc:	10000001 	.word	0x10000001
 80023d0:	04000120 	.word	0x04000120
 80023d4:	08003173 	.word	0x08003173

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023dc:	2b01      	cmp	r3, #1
 80023de:	f040 8153 	bne.w	8002688 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80023e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 814c 	beq.w	8002688 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80023f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 8145 	beq.w	8002688 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2210      	movs	r2, #16
 8002404:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002410:	2b40      	cmp	r3, #64	; 0x40
 8002412:	f040 80bb 	bne.w	800258c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002424:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 818f 	beq.w	800274c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002434:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002438:	429a      	cmp	r2, r3
 800243a:	f080 8187 	bcs.w	800274c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002444:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b00      	cmp	r3, #0
 8002458:	f040 8087 	bne.w	800256a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002464:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002468:	e853 3f00 	ldrex	r3, [r3]
 800246c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002470:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002478:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002486:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800248a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002492:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002496:	e841 2300 	strex	r3, r2, [r1]
 800249a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800249e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1da      	bne.n	800245c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3308      	adds	r3, #8
 80024ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024b0:	e853 3f00 	ldrex	r3, [r3]
 80024b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80024b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	3308      	adds	r3, #8
 80024c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80024ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80024d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024d6:	e841 2300 	strex	r3, r2, [r1]
 80024da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80024dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1e1      	bne.n	80024a6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3308      	adds	r3, #8
 80024e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024ec:	e853 3f00 	ldrex	r3, [r3]
 80024f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80024f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	3308      	adds	r3, #8
 8002502:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002506:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002508:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800250c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800250e:	e841 2300 	strex	r3, r2, [r1]
 8002512:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1e3      	bne.n	80024e2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2220      	movs	r2, #32
 800251e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800252e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002530:	e853 3f00 	ldrex	r3, [r3]
 8002534:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002538:	f023 0310 	bic.w	r3, r3, #16
 800253c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800254a:	65bb      	str	r3, [r7, #88]	; 0x58
 800254c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800254e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002550:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002552:	e841 2300 	strex	r3, r2, [r1]
 8002556:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1e4      	bne.n	8002528 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fb44 	bl	8000bf2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2202      	movs	r2, #2
 800256e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800257c:	b29b      	uxth	r3, r3
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	b29b      	uxth	r3, r3
 8002582:	4619      	mov	r1, r3
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f8fd 	bl	8002784 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800258a:	e0df      	b.n	800274c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002598:	b29b      	uxth	r3, r3
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 80d1 	beq.w	8002750 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80025ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 80cc 	beq.w	8002750 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c0:	e853 3f00 	ldrex	r3, [r3]
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80025c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025da:	647b      	str	r3, [r7, #68]	; 0x44
 80025dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025e2:	e841 2300 	strex	r3, r2, [r1]
 80025e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80025e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1e4      	bne.n	80025b8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	3308      	adds	r3, #8
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	e853 3f00 	ldrex	r3, [r3]
 80025fc:	623b      	str	r3, [r7, #32]
   return(result);
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3308      	adds	r3, #8
 8002612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002616:	633a      	str	r2, [r7, #48]	; 0x30
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800261c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800261e:	e841 2300 	strex	r3, r2, [r1]
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e1      	bne.n	80025ee <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2220      	movs	r2, #32
 800262e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	e853 3f00 	ldrex	r3, [r3]
 800264a:	60fb      	str	r3, [r7, #12]
   return(result);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 0310 	bic.w	r3, r3, #16
 8002652:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002664:	69b9      	ldr	r1, [r7, #24]
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	e841 2300 	strex	r3, r2, [r1]
 800266c:	617b      	str	r3, [r7, #20]
   return(result);
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e4      	bne.n	800263e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800267a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800267e:	4619      	mov	r1, r3
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f87f 	bl	8002784 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002686:	e063      	b.n	8002750 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800268c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00e      	beq.n	80026b2 <HAL_UART_IRQHandler+0x59e>
 8002694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fda2 	bl	80031f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80026b0:	e051      	b.n	8002756 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80026b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d014      	beq.n	80026e8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80026be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d105      	bne.n	80026d6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80026ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d03a      	beq.n	8002754 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	4798      	blx	r3
    }
    return;
 80026e6:	e035      	b.n	8002754 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80026e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d009      	beq.n	8002708 <HAL_UART_IRQHandler+0x5f4>
 80026f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fd4c 	bl	800319e <UART_EndTransmit_IT>
    return;
 8002706:	e026      	b.n	8002756 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800270c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d009      	beq.n	8002728 <HAL_UART_IRQHandler+0x614>
 8002714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002718:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 fd7b 	bl	800321c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002726:	e016      	b.n	8002756 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800272c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d010      	beq.n	8002756 <HAL_UART_IRQHandler+0x642>
 8002734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002738:	2b00      	cmp	r3, #0
 800273a:	da0c      	bge.n	8002756 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 fd63 	bl	8003208 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002742:	e008      	b.n	8002756 <HAL_UART_IRQHandler+0x642>
      return;
 8002744:	bf00      	nop
 8002746:	e006      	b.n	8002756 <HAL_UART_IRQHandler+0x642>
    return;
 8002748:	bf00      	nop
 800274a:	e004      	b.n	8002756 <HAL_UART_IRQHandler+0x642>
      return;
 800274c:	bf00      	nop
 800274e:	e002      	b.n	8002756 <HAL_UART_IRQHandler+0x642>
      return;
 8002750:	bf00      	nop
 8002752:	e000      	b.n	8002756 <HAL_UART_IRQHandler+0x642>
    return;
 8002754:	bf00      	nop
  }
}
 8002756:	37e8      	adds	r7, #232	; 0xe8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800279c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a0:	b08c      	sub	sp, #48	; 0x30
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4bab      	ldr	r3, [pc, #684]	; (8002a78 <UART_SetConfig+0x2dc>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027d4:	430b      	orrs	r3, r1
 80027d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4aa0      	ldr	r2, [pc, #640]	; (8002a7c <UART_SetConfig+0x2e0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d004      	beq.n	8002808 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002804:	4313      	orrs	r3, r2
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002812:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800281c:	430b      	orrs	r3, r1
 800281e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	f023 010f 	bic.w	r1, r3, #15
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a91      	ldr	r2, [pc, #580]	; (8002a80 <UART_SetConfig+0x2e4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d125      	bne.n	800288c <UART_SetConfig+0xf0>
 8002840:	4b90      	ldr	r3, [pc, #576]	; (8002a84 <UART_SetConfig+0x2e8>)
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b03      	cmp	r3, #3
 800284c:	d81a      	bhi.n	8002884 <UART_SetConfig+0xe8>
 800284e:	a201      	add	r2, pc, #4	; (adr r2, 8002854 <UART_SetConfig+0xb8>)
 8002850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002854:	08002865 	.word	0x08002865
 8002858:	08002875 	.word	0x08002875
 800285c:	0800286d 	.word	0x0800286d
 8002860:	0800287d 	.word	0x0800287d
 8002864:	2301      	movs	r3, #1
 8002866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800286a:	e0d6      	b.n	8002a1a <UART_SetConfig+0x27e>
 800286c:	2302      	movs	r3, #2
 800286e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002872:	e0d2      	b.n	8002a1a <UART_SetConfig+0x27e>
 8002874:	2304      	movs	r3, #4
 8002876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800287a:	e0ce      	b.n	8002a1a <UART_SetConfig+0x27e>
 800287c:	2308      	movs	r3, #8
 800287e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002882:	e0ca      	b.n	8002a1a <UART_SetConfig+0x27e>
 8002884:	2310      	movs	r3, #16
 8002886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800288a:	e0c6      	b.n	8002a1a <UART_SetConfig+0x27e>
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a7d      	ldr	r2, [pc, #500]	; (8002a88 <UART_SetConfig+0x2ec>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d138      	bne.n	8002908 <UART_SetConfig+0x16c>
 8002896:	4b7b      	ldr	r3, [pc, #492]	; (8002a84 <UART_SetConfig+0x2e8>)
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289c:	f003 030c 	and.w	r3, r3, #12
 80028a0:	2b0c      	cmp	r3, #12
 80028a2:	d82d      	bhi.n	8002900 <UART_SetConfig+0x164>
 80028a4:	a201      	add	r2, pc, #4	; (adr r2, 80028ac <UART_SetConfig+0x110>)
 80028a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028aa:	bf00      	nop
 80028ac:	080028e1 	.word	0x080028e1
 80028b0:	08002901 	.word	0x08002901
 80028b4:	08002901 	.word	0x08002901
 80028b8:	08002901 	.word	0x08002901
 80028bc:	080028f1 	.word	0x080028f1
 80028c0:	08002901 	.word	0x08002901
 80028c4:	08002901 	.word	0x08002901
 80028c8:	08002901 	.word	0x08002901
 80028cc:	080028e9 	.word	0x080028e9
 80028d0:	08002901 	.word	0x08002901
 80028d4:	08002901 	.word	0x08002901
 80028d8:	08002901 	.word	0x08002901
 80028dc:	080028f9 	.word	0x080028f9
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028e6:	e098      	b.n	8002a1a <UART_SetConfig+0x27e>
 80028e8:	2302      	movs	r3, #2
 80028ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028ee:	e094      	b.n	8002a1a <UART_SetConfig+0x27e>
 80028f0:	2304      	movs	r3, #4
 80028f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028f6:	e090      	b.n	8002a1a <UART_SetConfig+0x27e>
 80028f8:	2308      	movs	r3, #8
 80028fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028fe:	e08c      	b.n	8002a1a <UART_SetConfig+0x27e>
 8002900:	2310      	movs	r3, #16
 8002902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002906:	e088      	b.n	8002a1a <UART_SetConfig+0x27e>
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a5f      	ldr	r2, [pc, #380]	; (8002a8c <UART_SetConfig+0x2f0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d125      	bne.n	800295e <UART_SetConfig+0x1c2>
 8002912:	4b5c      	ldr	r3, [pc, #368]	; (8002a84 <UART_SetConfig+0x2e8>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800291c:	2b30      	cmp	r3, #48	; 0x30
 800291e:	d016      	beq.n	800294e <UART_SetConfig+0x1b2>
 8002920:	2b30      	cmp	r3, #48	; 0x30
 8002922:	d818      	bhi.n	8002956 <UART_SetConfig+0x1ba>
 8002924:	2b20      	cmp	r3, #32
 8002926:	d00a      	beq.n	800293e <UART_SetConfig+0x1a2>
 8002928:	2b20      	cmp	r3, #32
 800292a:	d814      	bhi.n	8002956 <UART_SetConfig+0x1ba>
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <UART_SetConfig+0x19a>
 8002930:	2b10      	cmp	r3, #16
 8002932:	d008      	beq.n	8002946 <UART_SetConfig+0x1aa>
 8002934:	e00f      	b.n	8002956 <UART_SetConfig+0x1ba>
 8002936:	2300      	movs	r3, #0
 8002938:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800293c:	e06d      	b.n	8002a1a <UART_SetConfig+0x27e>
 800293e:	2302      	movs	r3, #2
 8002940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002944:	e069      	b.n	8002a1a <UART_SetConfig+0x27e>
 8002946:	2304      	movs	r3, #4
 8002948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800294c:	e065      	b.n	8002a1a <UART_SetConfig+0x27e>
 800294e:	2308      	movs	r3, #8
 8002950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002954:	e061      	b.n	8002a1a <UART_SetConfig+0x27e>
 8002956:	2310      	movs	r3, #16
 8002958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800295c:	e05d      	b.n	8002a1a <UART_SetConfig+0x27e>
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a4b      	ldr	r2, [pc, #300]	; (8002a90 <UART_SetConfig+0x2f4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d125      	bne.n	80029b4 <UART_SetConfig+0x218>
 8002968:	4b46      	ldr	r3, [pc, #280]	; (8002a84 <UART_SetConfig+0x2e8>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002972:	2bc0      	cmp	r3, #192	; 0xc0
 8002974:	d016      	beq.n	80029a4 <UART_SetConfig+0x208>
 8002976:	2bc0      	cmp	r3, #192	; 0xc0
 8002978:	d818      	bhi.n	80029ac <UART_SetConfig+0x210>
 800297a:	2b80      	cmp	r3, #128	; 0x80
 800297c:	d00a      	beq.n	8002994 <UART_SetConfig+0x1f8>
 800297e:	2b80      	cmp	r3, #128	; 0x80
 8002980:	d814      	bhi.n	80029ac <UART_SetConfig+0x210>
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <UART_SetConfig+0x1f0>
 8002986:	2b40      	cmp	r3, #64	; 0x40
 8002988:	d008      	beq.n	800299c <UART_SetConfig+0x200>
 800298a:	e00f      	b.n	80029ac <UART_SetConfig+0x210>
 800298c:	2300      	movs	r3, #0
 800298e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002992:	e042      	b.n	8002a1a <UART_SetConfig+0x27e>
 8002994:	2302      	movs	r3, #2
 8002996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800299a:	e03e      	b.n	8002a1a <UART_SetConfig+0x27e>
 800299c:	2304      	movs	r3, #4
 800299e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029a2:	e03a      	b.n	8002a1a <UART_SetConfig+0x27e>
 80029a4:	2308      	movs	r3, #8
 80029a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029aa:	e036      	b.n	8002a1a <UART_SetConfig+0x27e>
 80029ac:	2310      	movs	r3, #16
 80029ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029b2:	e032      	b.n	8002a1a <UART_SetConfig+0x27e>
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a30      	ldr	r2, [pc, #192]	; (8002a7c <UART_SetConfig+0x2e0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d12a      	bne.n	8002a14 <UART_SetConfig+0x278>
 80029be:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <UART_SetConfig+0x2e8>)
 80029c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029cc:	d01a      	beq.n	8002a04 <UART_SetConfig+0x268>
 80029ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029d2:	d81b      	bhi.n	8002a0c <UART_SetConfig+0x270>
 80029d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029d8:	d00c      	beq.n	80029f4 <UART_SetConfig+0x258>
 80029da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029de:	d815      	bhi.n	8002a0c <UART_SetConfig+0x270>
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <UART_SetConfig+0x250>
 80029e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e8:	d008      	beq.n	80029fc <UART_SetConfig+0x260>
 80029ea:	e00f      	b.n	8002a0c <UART_SetConfig+0x270>
 80029ec:	2300      	movs	r3, #0
 80029ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029f2:	e012      	b.n	8002a1a <UART_SetConfig+0x27e>
 80029f4:	2302      	movs	r3, #2
 80029f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029fa:	e00e      	b.n	8002a1a <UART_SetConfig+0x27e>
 80029fc:	2304      	movs	r3, #4
 80029fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a02:	e00a      	b.n	8002a1a <UART_SetConfig+0x27e>
 8002a04:	2308      	movs	r3, #8
 8002a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a0a:	e006      	b.n	8002a1a <UART_SetConfig+0x27e>
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a12:	e002      	b.n	8002a1a <UART_SetConfig+0x27e>
 8002a14:	2310      	movs	r3, #16
 8002a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a17      	ldr	r2, [pc, #92]	; (8002a7c <UART_SetConfig+0x2e0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	f040 80a8 	bne.w	8002b76 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d834      	bhi.n	8002a98 <UART_SetConfig+0x2fc>
 8002a2e:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <UART_SetConfig+0x298>)
 8002a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a34:	08002a59 	.word	0x08002a59
 8002a38:	08002a99 	.word	0x08002a99
 8002a3c:	08002a61 	.word	0x08002a61
 8002a40:	08002a99 	.word	0x08002a99
 8002a44:	08002a67 	.word	0x08002a67
 8002a48:	08002a99 	.word	0x08002a99
 8002a4c:	08002a99 	.word	0x08002a99
 8002a50:	08002a99 	.word	0x08002a99
 8002a54:	08002a6f 	.word	0x08002a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a58:	f7ff f87e 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 8002a5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a5e:	e021      	b.n	8002aa4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <UART_SetConfig+0x2f8>)
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a64:	e01e      	b.n	8002aa4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a66:	f7ff f809 	bl	8001a7c <HAL_RCC_GetSysClockFreq>
 8002a6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a6c:	e01a      	b.n	8002aa4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a74:	e016      	b.n	8002aa4 <UART_SetConfig+0x308>
 8002a76:	bf00      	nop
 8002a78:	cfff69f3 	.word	0xcfff69f3
 8002a7c:	40008000 	.word	0x40008000
 8002a80:	40013800 	.word	0x40013800
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40004400 	.word	0x40004400
 8002a8c:	40004800 	.word	0x40004800
 8002a90:	40004c00 	.word	0x40004c00
 8002a94:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002aa2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 812a 	beq.w	8002d00 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	4a9e      	ldr	r2, [pc, #632]	; (8002d2c <UART_SetConfig+0x590>)
 8002ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	fbb3 f3f2 	udiv	r3, r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4413      	add	r3, r2
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d305      	bcc.n	8002adc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d903      	bls.n	8002ae4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002ae2:	e10d      	b.n	8002d00 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	60fa      	str	r2, [r7, #12]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	4a8e      	ldr	r2, [pc, #568]	; (8002d2c <UART_SetConfig+0x590>)
 8002af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	2200      	movs	r2, #0
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b06:	f7fd fb8b 	bl	8000220 <__aeabi_uldivmod>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	020b      	lsls	r3, r1, #8
 8002b1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002b20:	0202      	lsls	r2, r0, #8
 8002b22:	6979      	ldr	r1, [r7, #20]
 8002b24:	6849      	ldr	r1, [r1, #4]
 8002b26:	0849      	lsrs	r1, r1, #1
 8002b28:	2000      	movs	r0, #0
 8002b2a:	460c      	mov	r4, r1
 8002b2c:	4605      	mov	r5, r0
 8002b2e:	eb12 0804 	adds.w	r8, r2, r4
 8002b32:	eb43 0905 	adc.w	r9, r3, r5
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	469a      	mov	sl, r3
 8002b3e:	4693      	mov	fp, r2
 8002b40:	4652      	mov	r2, sl
 8002b42:	465b      	mov	r3, fp
 8002b44:	4640      	mov	r0, r8
 8002b46:	4649      	mov	r1, r9
 8002b48:	f7fd fb6a 	bl	8000220 <__aeabi_uldivmod>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4613      	mov	r3, r2
 8002b52:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b5a:	d308      	bcc.n	8002b6e <UART_SetConfig+0x3d2>
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b62:	d204      	bcs.n	8002b6e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6a3a      	ldr	r2, [r7, #32]
 8002b6a:	60da      	str	r2, [r3, #12]
 8002b6c:	e0c8      	b.n	8002d00 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002b74:	e0c4      	b.n	8002d00 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b7e:	d167      	bne.n	8002c50 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002b80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d828      	bhi.n	8002bda <UART_SetConfig+0x43e>
 8002b88:	a201      	add	r2, pc, #4	; (adr r2, 8002b90 <UART_SetConfig+0x3f4>)
 8002b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8e:	bf00      	nop
 8002b90:	08002bb5 	.word	0x08002bb5
 8002b94:	08002bbd 	.word	0x08002bbd
 8002b98:	08002bc5 	.word	0x08002bc5
 8002b9c:	08002bdb 	.word	0x08002bdb
 8002ba0:	08002bcb 	.word	0x08002bcb
 8002ba4:	08002bdb 	.word	0x08002bdb
 8002ba8:	08002bdb 	.word	0x08002bdb
 8002bac:	08002bdb 	.word	0x08002bdb
 8002bb0:	08002bd3 	.word	0x08002bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bb4:	f7fe ffd0 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 8002bb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002bba:	e014      	b.n	8002be6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bbc:	f7fe ffe2 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 8002bc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002bc2:	e010      	b.n	8002be6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bc4:	4b5a      	ldr	r3, [pc, #360]	; (8002d30 <UART_SetConfig+0x594>)
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002bc8:	e00d      	b.n	8002be6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bca:	f7fe ff57 	bl	8001a7c <HAL_RCC_GetSysClockFreq>
 8002bce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002bd0:	e009      	b.n	8002be6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002bd8:	e005      	b.n	8002be6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002be4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8089 	beq.w	8002d00 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	4a4e      	ldr	r2, [pc, #312]	; (8002d2c <UART_SetConfig+0x590>)
 8002bf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c00:	005a      	lsls	r2, r3, #1
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	085b      	lsrs	r3, r3, #1
 8002c08:	441a      	add	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	2b0f      	cmp	r3, #15
 8002c18:	d916      	bls.n	8002c48 <UART_SetConfig+0x4ac>
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c20:	d212      	bcs.n	8002c48 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	f023 030f 	bic.w	r3, r3, #15
 8002c2a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	085b      	lsrs	r3, r3, #1
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	8bfb      	ldrh	r3, [r7, #30]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	8bfa      	ldrh	r2, [r7, #30]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	e05b      	b.n	8002d00 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002c4e:	e057      	b.n	8002d00 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d828      	bhi.n	8002caa <UART_SetConfig+0x50e>
 8002c58:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <UART_SetConfig+0x4c4>)
 8002c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5e:	bf00      	nop
 8002c60:	08002c85 	.word	0x08002c85
 8002c64:	08002c8d 	.word	0x08002c8d
 8002c68:	08002c95 	.word	0x08002c95
 8002c6c:	08002cab 	.word	0x08002cab
 8002c70:	08002c9b 	.word	0x08002c9b
 8002c74:	08002cab 	.word	0x08002cab
 8002c78:	08002cab 	.word	0x08002cab
 8002c7c:	08002cab 	.word	0x08002cab
 8002c80:	08002ca3 	.word	0x08002ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c84:	f7fe ff68 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 8002c88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002c8a:	e014      	b.n	8002cb6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c8c:	f7fe ff7a 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 8002c90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002c92:	e010      	b.n	8002cb6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c94:	4b26      	ldr	r3, [pc, #152]	; (8002d30 <UART_SetConfig+0x594>)
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002c98:	e00d      	b.n	8002cb6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c9a:	f7fe feef 	bl	8001a7c <HAL_RCC_GetSysClockFreq>
 8002c9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ca0:	e009      	b.n	8002cb6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ca8:	e005      	b.n	8002cb6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002cb4:	bf00      	nop
    }

    if (pclk != 0U)
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d021      	beq.n	8002d00 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	4a1a      	ldr	r2, [pc, #104]	; (8002d2c <UART_SetConfig+0x590>)
 8002cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	fbb3 f2f2 	udiv	r2, r3, r2
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	085b      	lsrs	r3, r3, #1
 8002cd4:	441a      	add	r2, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	2b0f      	cmp	r3, #15
 8002ce4:	d909      	bls.n	8002cfa <UART_SetConfig+0x55e>
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cec:	d205      	bcs.n	8002cfa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60da      	str	r2, [r3, #12]
 8002cf8:	e002      	b.n	8002d00 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2200      	movs	r2, #0
 8002d14:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002d1c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3730      	adds	r7, #48	; 0x30
 8002d24:	46bd      	mov	sp, r7
 8002d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d2a:	bf00      	nop
 8002d2c:	08006028 	.word	0x08006028
 8002d30:	00f42400 	.word	0x00f42400

08002d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00a      	beq.n	8002dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00a      	beq.n	8002de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01a      	beq.n	8002e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e32:	d10a      	bne.n	8002e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	605a      	str	r2, [r3, #4]
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b098      	sub	sp, #96	; 0x60
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e88:	f7fd fd98 	bl	80009bc <HAL_GetTick>
 8002e8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d12f      	bne.n	8002efc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f88e 	bl	8002fcc <UART_WaitOnFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d022      	beq.n	8002efc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebe:	e853 3f00 	ldrex	r3, [r3]
 8002ec2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eca:	653b      	str	r3, [r7, #80]	; 0x50
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002eda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002edc:	e841 2300 	strex	r3, r2, [r1]
 8002ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e6      	bne.n	8002eb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e063      	b.n	8002fc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d149      	bne.n	8002f9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f12:	2200      	movs	r2, #0
 8002f14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f857 	bl	8002fcc <UART_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d03c      	beq.n	8002f9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	e853 3f00 	ldrex	r3, [r3]
 8002f30:	623b      	str	r3, [r7, #32]
   return(result);
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f42:	633b      	str	r3, [r7, #48]	; 0x30
 8002f44:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f4a:	e841 2300 	strex	r3, r2, [r1]
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e6      	bne.n	8002f24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3308      	adds	r3, #8
 8002f5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	e853 3f00 	ldrex	r3, [r3]
 8002f64:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3308      	adds	r3, #8
 8002f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f76:	61fa      	str	r2, [r7, #28]
 8002f78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7a:	69b9      	ldr	r1, [r7, #24]
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	e841 2300 	strex	r3, r2, [r1]
 8002f82:	617b      	str	r3, [r7, #20]
   return(result);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1e5      	bne.n	8002f56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e012      	b.n	8002fc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3758      	adds	r7, #88	; 0x58
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fdc:	e04f      	b.n	800307e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d04b      	beq.n	800307e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe6:	f7fd fce9 	bl	80009bc <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d302      	bcc.n	8002ffc <UART_WaitOnFlagUntilTimeout+0x30>
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e04e      	b.n	800309e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b00      	cmp	r3, #0
 800300c:	d037      	beq.n	800307e <UART_WaitOnFlagUntilTimeout+0xb2>
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b80      	cmp	r3, #128	; 0x80
 8003012:	d034      	beq.n	800307e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b40      	cmp	r3, #64	; 0x40
 8003018:	d031      	beq.n	800307e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b08      	cmp	r3, #8
 8003026:	d110      	bne.n	800304a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2208      	movs	r2, #8
 800302e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 f838 	bl	80030a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2208      	movs	r2, #8
 800303a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e029      	b.n	800309e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003058:	d111      	bne.n	800307e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f81e 	bl	80030a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e00f      	b.n	800309e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	69da      	ldr	r2, [r3, #28]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4013      	ands	r3, r2
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	429a      	cmp	r2, r3
 800308c:	bf0c      	ite	eq
 800308e:	2301      	moveq	r3, #1
 8003090:	2300      	movne	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	429a      	cmp	r2, r3
 800309a:	d0a0      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b095      	sub	sp, #84	; 0x54
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b6:	e853 3f00 	ldrex	r3, [r3]
 80030ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030cc:	643b      	str	r3, [r7, #64]	; 0x40
 80030ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030d4:	e841 2300 	strex	r3, r2, [r1]
 80030d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e6      	bne.n	80030ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3308      	adds	r3, #8
 80030e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	e853 3f00 	ldrex	r3, [r3]
 80030ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f6:	f023 0301 	bic.w	r3, r3, #1
 80030fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3308      	adds	r3, #8
 8003102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003104:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800310a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800310c:	e841 2300 	strex	r3, r2, [r1]
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1e3      	bne.n	80030e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800311c:	2b01      	cmp	r3, #1
 800311e:	d118      	bne.n	8003152 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	e853 3f00 	ldrex	r3, [r3]
 800312c:	60bb      	str	r3, [r7, #8]
   return(result);
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f023 0310 	bic.w	r3, r3, #16
 8003134:	647b      	str	r3, [r7, #68]	; 0x44
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800313e:	61bb      	str	r3, [r7, #24]
 8003140:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003142:	6979      	ldr	r1, [r7, #20]
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	e841 2300 	strex	r3, r2, [r1]
 800314a:	613b      	str	r3, [r7, #16]
   return(result);
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1e6      	bne.n	8003120 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003166:	bf00      	nop
 8003168:	3754      	adds	r7, #84	; 0x54
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f7ff faed 	bl	8002770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b088      	sub	sp, #32
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	e853 3f00 	ldrex	r3, [r3]
 80031b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	61bb      	str	r3, [r7, #24]
 80031c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	6979      	ldr	r1, [r7, #20]
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	e841 2300 	strex	r3, r2, [r1]
 80031d0:	613b      	str	r3, [r7, #16]
   return(result);
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e6      	bne.n	80031a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff fab8 	bl	800275c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031ec:	bf00      	nop
 80031ee:	3720      	adds	r7, #32
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <HAL_UARTEx_DisableFifoMode+0x16>
 8003242:	2302      	movs	r3, #2
 8003244:	e027      	b.n	8003296 <HAL_UARTEx_DisableFifoMode+0x66>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2224      	movs	r2, #36	; 0x24
 8003252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0201 	bic.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003274:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2220      	movs	r2, #32
 8003288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e02d      	b.n	8003316 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2224      	movs	r2, #36	; 0x24
 80032c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f850 	bl	800339c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2220      	movs	r2, #32
 8003308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003332:	2302      	movs	r3, #2
 8003334:	e02d      	b.n	8003392 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2224      	movs	r2, #36	; 0x24
 8003342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0201 	bic.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f812 	bl	800339c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d108      	bne.n	80033be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80033bc:	e031      	b.n	8003422 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80033be:	2308      	movs	r3, #8
 80033c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80033c2:	2308      	movs	r3, #8
 80033c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	0e5b      	lsrs	r3, r3, #25
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	0f5b      	lsrs	r3, r3, #29
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80033e6:	7bbb      	ldrb	r3, [r7, #14]
 80033e8:	7b3a      	ldrb	r2, [r7, #12]
 80033ea:	4911      	ldr	r1, [pc, #68]	; (8003430 <UARTEx_SetNbDataToProcess+0x94>)
 80033ec:	5c8a      	ldrb	r2, [r1, r2]
 80033ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80033f2:	7b3a      	ldrb	r2, [r7, #12]
 80033f4:	490f      	ldr	r1, [pc, #60]	; (8003434 <UARTEx_SetNbDataToProcess+0x98>)
 80033f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80033f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	7b7a      	ldrb	r2, [r7, #13]
 8003408:	4909      	ldr	r1, [pc, #36]	; (8003430 <UARTEx_SetNbDataToProcess+0x94>)
 800340a:	5c8a      	ldrb	r2, [r1, r2]
 800340c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003410:	7b7a      	ldrb	r2, [r7, #13]
 8003412:	4908      	ldr	r1, [pc, #32]	; (8003434 <UARTEx_SetNbDataToProcess+0x98>)
 8003414:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003416:	fb93 f3f2 	sdiv	r3, r3, r2
 800341a:	b29a      	uxth	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003422:	bf00      	nop
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	08006040 	.word	0x08006040
 8003434:	08006048 	.word	0x08006048

08003438 <__NVIC_SetPriority>:
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	6039      	str	r1, [r7, #0]
 8003442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003448:	2b00      	cmp	r3, #0
 800344a:	db0a      	blt.n	8003462 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	b2da      	uxtb	r2, r3
 8003450:	490c      	ldr	r1, [pc, #48]	; (8003484 <__NVIC_SetPriority+0x4c>)
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	0112      	lsls	r2, r2, #4
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	440b      	add	r3, r1
 800345c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003460:	e00a      	b.n	8003478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	4908      	ldr	r1, [pc, #32]	; (8003488 <__NVIC_SetPriority+0x50>)
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	3b04      	subs	r3, #4
 8003470:	0112      	lsls	r2, r2, #4
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	440b      	add	r3, r1
 8003476:	761a      	strb	r2, [r3, #24]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	e000e100 	.word	0xe000e100
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003490:	2100      	movs	r1, #0
 8003492:	f06f 0004 	mvn.w	r0, #4
 8003496:	f7ff ffcf 	bl	8003438 <__NVIC_SetPriority>
#endif
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034a6:	f3ef 8305 	mrs	r3, IPSR
 80034aa:	603b      	str	r3, [r7, #0]
  return(result);
 80034ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80034b2:	f06f 0305 	mvn.w	r3, #5
 80034b6:	607b      	str	r3, [r7, #4]
 80034b8:	e00c      	b.n	80034d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80034ba:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <osKernelInitialize+0x44>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d105      	bne.n	80034ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80034c2:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <osKernelInitialize+0x44>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	607b      	str	r3, [r7, #4]
 80034cc:	e002      	b.n	80034d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80034ce:	f04f 33ff 	mov.w	r3, #4294967295
 80034d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80034d4:	687b      	ldr	r3, [r7, #4]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	200000c8 	.word	0x200000c8

080034e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034ee:	f3ef 8305 	mrs	r3, IPSR
 80034f2:	603b      	str	r3, [r7, #0]
  return(result);
 80034f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <osKernelStart+0x1a>
    stat = osErrorISR;
 80034fa:	f06f 0305 	mvn.w	r3, #5
 80034fe:	607b      	str	r3, [r7, #4]
 8003500:	e010      	b.n	8003524 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003502:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <osKernelStart+0x48>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d109      	bne.n	800351e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800350a:	f7ff ffbf 	bl	800348c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800350e:	4b08      	ldr	r3, [pc, #32]	; (8003530 <osKernelStart+0x48>)
 8003510:	2202      	movs	r2, #2
 8003512:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003514:	f001 f866 	bl	80045e4 <vTaskStartScheduler>
      stat = osOK;
 8003518:	2300      	movs	r3, #0
 800351a:	607b      	str	r3, [r7, #4]
 800351c:	e002      	b.n	8003524 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800351e:	f04f 33ff 	mov.w	r3, #4294967295
 8003522:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003524:	687b      	ldr	r3, [r7, #4]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	200000c8 	.word	0x200000c8

08003534 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003534:	b580      	push	{r7, lr}
 8003536:	b08e      	sub	sp, #56	; 0x38
 8003538:	af04      	add	r7, sp, #16
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003540:	2300      	movs	r3, #0
 8003542:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003544:	f3ef 8305 	mrs	r3, IPSR
 8003548:	617b      	str	r3, [r7, #20]
  return(result);
 800354a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800354c:	2b00      	cmp	r3, #0
 800354e:	d17e      	bne.n	800364e <osThreadNew+0x11a>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d07b      	beq.n	800364e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800355a:	2318      	movs	r3, #24
 800355c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800355e:	2300      	movs	r3, #0
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003562:	f04f 33ff 	mov.w	r3, #4294967295
 8003566:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d045      	beq.n	80035fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <osThreadNew+0x48>
        name = attr->name;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <osThreadNew+0x6e>
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	2b38      	cmp	r3, #56	; 0x38
 8003594:	d805      	bhi.n	80035a2 <osThreadNew+0x6e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <osThreadNew+0x72>
        return (NULL);
 80035a2:	2300      	movs	r3, #0
 80035a4:	e054      	b.n	8003650 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	089b      	lsrs	r3, r3, #2
 80035b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00e      	beq.n	80035dc <osThreadNew+0xa8>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	2b5b      	cmp	r3, #91	; 0x5b
 80035c4:	d90a      	bls.n	80035dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d006      	beq.n	80035dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <osThreadNew+0xa8>
        mem = 1;
 80035d6:	2301      	movs	r3, #1
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	e010      	b.n	80035fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10c      	bne.n	80035fe <osThreadNew+0xca>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d108      	bne.n	80035fe <osThreadNew+0xca>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d104      	bne.n	80035fe <osThreadNew+0xca>
          mem = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61bb      	str	r3, [r7, #24]
 80035f8:	e001      	b.n	80035fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d110      	bne.n	8003626 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800360c:	9202      	str	r2, [sp, #8]
 800360e:	9301      	str	r3, [sp, #4]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	6a3a      	ldr	r2, [r7, #32]
 8003618:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fe0c 	bl	8004238 <xTaskCreateStatic>
 8003620:	4603      	mov	r3, r0
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	e013      	b.n	800364e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d110      	bne.n	800364e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	b29a      	uxth	r2, r3
 8003630:	f107 0310 	add.w	r3, r7, #16
 8003634:	9301      	str	r3, [sp, #4]
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 fe57 	bl	80042f2 <xTaskCreate>
 8003644:	4603      	mov	r3, r0
 8003646:	2b01      	cmp	r3, #1
 8003648:	d001      	beq.n	800364e <osThreadNew+0x11a>
            hTask = NULL;
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800364e:	693b      	ldr	r3, [r7, #16]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3728      	adds	r7, #40	; 0x28
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003660:	f3ef 8305 	mrs	r3, IPSR
 8003664:	60bb      	str	r3, [r7, #8]
  return(result);
 8003666:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <osDelay+0x1c>
    stat = osErrorISR;
 800366c:	f06f 0305 	mvn.w	r3, #5
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	e007      	b.n	8003684 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <osDelay+0x2c>
      vTaskDelay(ticks);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 ff7c 	bl	800457c <vTaskDelay>
    }
  }

  return (stat);
 8003684:	68fb      	ldr	r3, [r7, #12]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4a07      	ldr	r2, [pc, #28]	; (80036bc <vApplicationGetIdleTaskMemory+0x2c>)
 80036a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4a06      	ldr	r2, [pc, #24]	; (80036c0 <vApplicationGetIdleTaskMemory+0x30>)
 80036a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2280      	movs	r2, #128	; 0x80
 80036ac:	601a      	str	r2, [r3, #0]
}
 80036ae:	bf00      	nop
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	200000cc 	.word	0x200000cc
 80036c0:	20000128 	.word	0x20000128

080036c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4a07      	ldr	r2, [pc, #28]	; (80036f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80036d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4a06      	ldr	r2, [pc, #24]	; (80036f4 <vApplicationGetTimerTaskMemory+0x30>)
 80036da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036e2:	601a      	str	r2, [r3, #0]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	20000328 	.word	0x20000328
 80036f4:	20000384 	.word	0x20000384

080036f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f103 0208 	add.w	r2, r3, #8
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f04f 32ff 	mov.w	r2, #4294967295
 8003710:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f103 0208 	add.w	r2, r3, #8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f103 0208 	add.w	r2, r3, #8
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003752:	b480      	push	{r7}
 8003754:	b085      	sub	sp, #20
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	601a      	str	r2, [r3, #0]
}
 800378e:	bf00      	nop
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b0:	d103      	bne.n	80037ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	e00c      	b.n	80037d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3308      	adds	r3, #8
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	e002      	b.n	80037c8 <vListInsert+0x2e>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d2f6      	bcs.n	80037c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	601a      	str	r2, [r3, #0]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6892      	ldr	r2, [r2, #8]
 8003822:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6852      	ldr	r2, [r2, #4]
 800382c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	429a      	cmp	r2, r3
 8003836:	d103      	bne.n	8003840 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	1e5a      	subs	r2, r3, #1
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10a      	bne.n	800388a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003886:	bf00      	nop
 8003888:	e7fe      	b.n	8003888 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800388a:	f002 f84b 	bl	8005924 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	68f9      	ldr	r1, [r7, #12]
 8003898:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800389a:	fb01 f303 	mul.w	r3, r1, r3
 800389e:	441a      	add	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ba:	3b01      	subs	r3, #1
 80038bc:	68f9      	ldr	r1, [r7, #12]
 80038be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038c0:	fb01 f303 	mul.w	r3, r1, r3
 80038c4:	441a      	add	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	22ff      	movs	r2, #255	; 0xff
 80038ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	22ff      	movs	r2, #255	; 0xff
 80038d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d114      	bne.n	800390a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d01a      	beq.n	800391e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	3310      	adds	r3, #16
 80038ec:	4618      	mov	r0, r3
 80038ee:	f001 f903 	bl	8004af8 <xTaskRemoveFromEventList>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d012      	beq.n	800391e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038f8:	4b0c      	ldr	r3, [pc, #48]	; (800392c <xQueueGenericReset+0xcc>)
 80038fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	e009      	b.n	800391e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	3310      	adds	r3, #16
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff fef2 	bl	80036f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3324      	adds	r3, #36	; 0x24
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff feed 	bl	80036f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800391e:	f002 f831 	bl	8005984 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003922:	2301      	movs	r3, #1
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	e000ed04 	.word	0xe000ed04

08003930 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08e      	sub	sp, #56	; 0x38
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003956:	bf00      	nop
 8003958:	e7fe      	b.n	8003958 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003972:	bf00      	nop
 8003974:	e7fe      	b.n	8003974 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <xQueueGenericCreateStatic+0x52>
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <xQueueGenericCreateStatic+0x56>
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <xQueueGenericCreateStatic+0x58>
 8003986:	2300      	movs	r3, #0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10a      	bne.n	80039a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	623b      	str	r3, [r7, #32]
}
 800399e:	bf00      	nop
 80039a0:	e7fe      	b.n	80039a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d102      	bne.n	80039ae <xQueueGenericCreateStatic+0x7e>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <xQueueGenericCreateStatic+0x82>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <xQueueGenericCreateStatic+0x84>
 80039b2:	2300      	movs	r3, #0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	61fb      	str	r3, [r7, #28]
}
 80039ca:	bf00      	nop
 80039cc:	e7fe      	b.n	80039cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80039ce:	2350      	movs	r3, #80	; 0x50
 80039d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b50      	cmp	r3, #80	; 0x50
 80039d6:	d00a      	beq.n	80039ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	61bb      	str	r3, [r7, #24]
}
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80039ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80039f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00d      	beq.n	8003a16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 f805 	bl	8003a20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3730      	adds	r7, #48	; 0x30
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d103      	bne.n	8003a3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	e002      	b.n	8003a42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a4e:	2101      	movs	r1, #1
 8003a50:	69b8      	ldr	r0, [r7, #24]
 8003a52:	f7ff ff05 	bl	8003860 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	78fa      	ldrb	r2, [r7, #3]
 8003a5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08e      	sub	sp, #56	; 0x38
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a76:	2300      	movs	r3, #0
 8003a78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <xQueueGenericSend+0x32>
	__asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a96:	bf00      	nop
 8003a98:	e7fe      	b.n	8003a98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d103      	bne.n	8003aa8 <xQueueGenericSend+0x40>
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <xQueueGenericSend+0x44>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <xQueueGenericSend+0x46>
 8003aac:	2300      	movs	r3, #0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10a      	bne.n	8003ac8 <xQueueGenericSend+0x60>
	__asm volatile
 8003ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab6:	f383 8811 	msr	BASEPRI, r3
 8003aba:	f3bf 8f6f 	isb	sy
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ac4:	bf00      	nop
 8003ac6:	e7fe      	b.n	8003ac6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d103      	bne.n	8003ad6 <xQueueGenericSend+0x6e>
 8003ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <xQueueGenericSend+0x72>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <xQueueGenericSend+0x74>
 8003ada:	2300      	movs	r3, #0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10a      	bne.n	8003af6 <xQueueGenericSend+0x8e>
	__asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	623b      	str	r3, [r7, #32]
}
 8003af2:	bf00      	nop
 8003af4:	e7fe      	b.n	8003af4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003af6:	f001 f9bd 	bl	8004e74 <xTaskGetSchedulerState>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d102      	bne.n	8003b06 <xQueueGenericSend+0x9e>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <xQueueGenericSend+0xa2>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <xQueueGenericSend+0xa4>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <xQueueGenericSend+0xbe>
	__asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	61fb      	str	r3, [r7, #28]
}
 8003b22:	bf00      	nop
 8003b24:	e7fe      	b.n	8003b24 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b26:	f001 fefd 	bl	8005924 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d302      	bcc.n	8003b3c <xQueueGenericSend+0xd4>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d129      	bne.n	8003b90 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b42:	f000 fa0b 	bl	8003f5c <prvCopyDataToQueue>
 8003b46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d010      	beq.n	8003b72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	3324      	adds	r3, #36	; 0x24
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 ffcf 	bl	8004af8 <xTaskRemoveFromEventList>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d013      	beq.n	8003b88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b60:	4b3f      	ldr	r3, [pc, #252]	; (8003c60 <xQueueGenericSend+0x1f8>)
 8003b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	e00a      	b.n	8003b88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d007      	beq.n	8003b88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b78:	4b39      	ldr	r3, [pc, #228]	; (8003c60 <xQueueGenericSend+0x1f8>)
 8003b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b88:	f001 fefc 	bl	8005984 <vPortExitCritical>
				return pdPASS;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e063      	b.n	8003c58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d103      	bne.n	8003b9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b96:	f001 fef5 	bl	8005984 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e05c      	b.n	8003c58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d106      	bne.n	8003bb2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ba4:	f107 0314 	add.w	r3, r7, #20
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f001 f809 	bl	8004bc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bb2:	f001 fee7 	bl	8005984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bb6:	f000 fd7b 	bl	80046b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bba:	f001 feb3 	bl	8005924 <vPortEnterCritical>
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bc4:	b25b      	sxtb	r3, r3
 8003bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bca:	d103      	bne.n	8003bd4 <xQueueGenericSend+0x16c>
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bda:	b25b      	sxtb	r3, r3
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be0:	d103      	bne.n	8003bea <xQueueGenericSend+0x182>
 8003be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bea:	f001 fecb 	bl	8005984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bee:	1d3a      	adds	r2, r7, #4
 8003bf0:	f107 0314 	add.w	r3, r7, #20
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fff8 	bl	8004bec <xTaskCheckForTimeOut>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d124      	bne.n	8003c4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c04:	f000 faa2 	bl	800414c <prvIsQueueFull>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d018      	beq.n	8003c40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	3310      	adds	r3, #16
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 ff1e 	bl	8004a58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c1e:	f000 fa2d 	bl	800407c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c22:	f000 fd53 	bl	80046cc <xTaskResumeAll>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f47f af7c 	bne.w	8003b26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <xQueueGenericSend+0x1f8>)
 8003c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	e772      	b.n	8003b26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c42:	f000 fa1b 	bl	800407c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c46:	f000 fd41 	bl	80046cc <xTaskResumeAll>
 8003c4a:	e76c      	b.n	8003b26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c4e:	f000 fa15 	bl	800407c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c52:	f000 fd3b 	bl	80046cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3738      	adds	r7, #56	; 0x38
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	e000ed04 	.word	0xe000ed04

08003c64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b090      	sub	sp, #64	; 0x40
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10a      	bne.n	8003c92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c8e:	bf00      	nop
 8003c90:	e7fe      	b.n	8003c90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d103      	bne.n	8003ca0 <xQueueGenericSendFromISR+0x3c>
 8003c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <xQueueGenericSendFromISR+0x40>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <xQueueGenericSendFromISR+0x42>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10a      	bne.n	8003cc0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003cbc:	bf00      	nop
 8003cbe:	e7fe      	b.n	8003cbe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d103      	bne.n	8003cce <xQueueGenericSendFromISR+0x6a>
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <xQueueGenericSendFromISR+0x6e>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <xQueueGenericSendFromISR+0x70>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10a      	bne.n	8003cee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cdc:	f383 8811 	msr	BASEPRI, r3
 8003ce0:	f3bf 8f6f 	isb	sy
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	623b      	str	r3, [r7, #32]
}
 8003cea:	bf00      	nop
 8003cec:	e7fe      	b.n	8003cec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cee:	f001 fefb 	bl	8005ae8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003cf2:	f3ef 8211 	mrs	r2, BASEPRI
 8003cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	61fa      	str	r2, [r7, #28]
 8003d08:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d0c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d302      	bcc.n	8003d20 <xQueueGenericSendFromISR+0xbc>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d12f      	bne.n	8003d80 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d36:	f000 f911 	bl	8003f5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	d112      	bne.n	8003d6a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d016      	beq.n	8003d7a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4e:	3324      	adds	r3, #36	; 0x24
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fed1 	bl	8004af8 <xTaskRemoveFromEventList>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00e      	beq.n	8003d7a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	e007      	b.n	8003d7a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d6e:	3301      	adds	r3, #1
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	b25a      	sxtb	r2, r3
 8003d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003d7e:	e001      	b.n	8003d84 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d86:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3740      	adds	r7, #64	; 0x40
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08c      	sub	sp, #48	; 0x30
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <xQueueReceive+0x30>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	623b      	str	r3, [r7, #32]
}
 8003dc8:	bf00      	nop
 8003dca:	e7fe      	b.n	8003dca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d103      	bne.n	8003dda <xQueueReceive+0x3e>
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <xQueueReceive+0x42>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <xQueueReceive+0x44>
 8003dde:	2300      	movs	r3, #0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10a      	bne.n	8003dfa <xQueueReceive+0x5e>
	__asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	61fb      	str	r3, [r7, #28]
}
 8003df6:	bf00      	nop
 8003df8:	e7fe      	b.n	8003df8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dfa:	f001 f83b 	bl	8004e74 <xTaskGetSchedulerState>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d102      	bne.n	8003e0a <xQueueReceive+0x6e>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <xQueueReceive+0x72>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <xQueueReceive+0x74>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10a      	bne.n	8003e2a <xQueueReceive+0x8e>
	__asm volatile
 8003e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	61bb      	str	r3, [r7, #24]
}
 8003e26:	bf00      	nop
 8003e28:	e7fe      	b.n	8003e28 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e2a:	f001 fd7b 	bl	8005924 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d01f      	beq.n	8003e7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e3e:	f000 f8f7 	bl	8004030 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	1e5a      	subs	r2, r3, #1
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00f      	beq.n	8003e72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	3310      	adds	r3, #16
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fe4e 	bl	8004af8 <xTaskRemoveFromEventList>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d007      	beq.n	8003e72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e62:	4b3d      	ldr	r3, [pc, #244]	; (8003f58 <xQueueReceive+0x1bc>)
 8003e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e72:	f001 fd87 	bl	8005984 <vPortExitCritical>
				return pdPASS;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e069      	b.n	8003f4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d103      	bne.n	8003e88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e80:	f001 fd80 	bl	8005984 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e84:	2300      	movs	r3, #0
 8003e86:	e062      	b.n	8003f4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e8e:	f107 0310 	add.w	r3, r7, #16
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fe94 	bl	8004bc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e9c:	f001 fd72 	bl	8005984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ea0:	f000 fc06 	bl	80046b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ea4:	f001 fd3e 	bl	8005924 <vPortEnterCritical>
 8003ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eae:	b25b      	sxtb	r3, r3
 8003eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb4:	d103      	bne.n	8003ebe <xQueueReceive+0x122>
 8003eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ec4:	b25b      	sxtb	r3, r3
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eca:	d103      	bne.n	8003ed4 <xQueueReceive+0x138>
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ed4:	f001 fd56 	bl	8005984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ed8:	1d3a      	adds	r2, r7, #4
 8003eda:	f107 0310 	add.w	r3, r7, #16
 8003ede:	4611      	mov	r1, r2
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fe83 	bl	8004bec <xTaskCheckForTimeOut>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d123      	bne.n	8003f34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eee:	f000 f917 	bl	8004120 <prvIsQueueEmpty>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d017      	beq.n	8003f28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	3324      	adds	r3, #36	; 0x24
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	4611      	mov	r1, r2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 fda9 	bl	8004a58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f08:	f000 f8b8 	bl	800407c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f0c:	f000 fbde 	bl	80046cc <xTaskResumeAll>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d189      	bne.n	8003e2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f16:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <xQueueReceive+0x1bc>)
 8003f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	e780      	b.n	8003e2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f2a:	f000 f8a7 	bl	800407c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f2e:	f000 fbcd 	bl	80046cc <xTaskResumeAll>
 8003f32:	e77a      	b.n	8003e2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f36:	f000 f8a1 	bl	800407c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f3a:	f000 fbc7 	bl	80046cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f40:	f000 f8ee 	bl	8004120 <prvIsQueueEmpty>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f43f af6f 	beq.w	8003e2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3730      	adds	r7, #48	; 0x30
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	e000ed04 	.word	0xe000ed04

08003f5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10d      	bne.n	8003f96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d14d      	bne.n	800401e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 ff92 	bl	8004eb0 <xTaskPriorityDisinherit>
 8003f8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	e043      	b.n	800401e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d119      	bne.n	8003fd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6858      	ldr	r0, [r3, #4]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	f001 fff4 	bl	8005f94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	441a      	add	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d32b      	bcc.n	800401e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	e026      	b.n	800401e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	68d8      	ldr	r0, [r3, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	f001 ffda 	bl	8005f94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	425b      	negs	r3, r3
 8003fea:	441a      	add	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d207      	bcs.n	800400c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	425b      	negs	r3, r3
 8004006:	441a      	add	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d105      	bne.n	800401e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	3b01      	subs	r3, #1
 800401c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004026:	697b      	ldr	r3, [r7, #20]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d018      	beq.n	8004074 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	441a      	add	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	429a      	cmp	r2, r3
 800405a:	d303      	bcc.n	8004064 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68d9      	ldr	r1, [r3, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	461a      	mov	r2, r3
 800406e:	6838      	ldr	r0, [r7, #0]
 8004070:	f001 ff90 	bl	8005f94 <memcpy>
	}
}
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004084:	f001 fc4e 	bl	8005924 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800408e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004090:	e011      	b.n	80040b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	2b00      	cmp	r3, #0
 8004098:	d012      	beq.n	80040c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3324      	adds	r3, #36	; 0x24
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fd2a 	bl	8004af8 <xTaskRemoveFromEventList>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040aa:	f000 fe01 	bl	8004cb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	dce9      	bgt.n	8004092 <prvUnlockQueue+0x16>
 80040be:	e000      	b.n	80040c2 <prvUnlockQueue+0x46>
					break;
 80040c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	22ff      	movs	r2, #255	; 0xff
 80040c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80040ca:	f001 fc5b 	bl	8005984 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040ce:	f001 fc29 	bl	8005924 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040da:	e011      	b.n	8004100 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d012      	beq.n	800410a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3310      	adds	r3, #16
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fd05 	bl	8004af8 <xTaskRemoveFromEventList>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040f4:	f000 fddc 	bl	8004cb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040f8:	7bbb      	ldrb	r3, [r7, #14]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004104:	2b00      	cmp	r3, #0
 8004106:	dce9      	bgt.n	80040dc <prvUnlockQueue+0x60>
 8004108:	e000      	b.n	800410c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800410a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	22ff      	movs	r2, #255	; 0xff
 8004110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004114:	f001 fc36 	bl	8005984 <vPortExitCritical>
}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004128:	f001 fbfc 	bl	8005924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	2b00      	cmp	r3, #0
 8004132:	d102      	bne.n	800413a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004134:	2301      	movs	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	e001      	b.n	800413e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800413e:	f001 fc21 	bl	8005984 <vPortExitCritical>

	return xReturn;
 8004142:	68fb      	ldr	r3, [r7, #12]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004154:	f001 fbe6 	bl	8005924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004160:	429a      	cmp	r2, r3
 8004162:	d102      	bne.n	800416a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004164:	2301      	movs	r3, #1
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	e001      	b.n	800416e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800416e:	f001 fc09 	bl	8005984 <vPortExitCritical>

	return xReturn;
 8004172:	68fb      	ldr	r3, [r7, #12]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	e014      	b.n	80041b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800418c:	4a0f      	ldr	r2, [pc, #60]	; (80041cc <vQueueAddToRegistry+0x50>)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10b      	bne.n	80041b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004198:	490c      	ldr	r1, [pc, #48]	; (80041cc <vQueueAddToRegistry+0x50>)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80041a2:	4a0a      	ldr	r2, [pc, #40]	; (80041cc <vQueueAddToRegistry+0x50>)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	4413      	add	r3, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80041ae:	e006      	b.n	80041be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3301      	adds	r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b07      	cmp	r3, #7
 80041ba:	d9e7      	bls.n	800418c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80041bc:	bf00      	nop
 80041be:	bf00      	nop
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	20000784 	.word	0x20000784

080041d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80041e0:	f001 fba0 	bl	8005924 <vPortEnterCritical>
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041ea:	b25b      	sxtb	r3, r3
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d103      	bne.n	80041fa <vQueueWaitForMessageRestricted+0x2a>
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004200:	b25b      	sxtb	r3, r3
 8004202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004206:	d103      	bne.n	8004210 <vQueueWaitForMessageRestricted+0x40>
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004210:	f001 fbb8 	bl	8005984 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004218:	2b00      	cmp	r3, #0
 800421a:	d106      	bne.n	800422a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	3324      	adds	r3, #36	; 0x24
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	68b9      	ldr	r1, [r7, #8]
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fc3b 	bl	8004aa0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800422a:	6978      	ldr	r0, [r7, #20]
 800422c:	f7ff ff26 	bl	800407c <prvUnlockQueue>
	}
 8004230:	bf00      	nop
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08e      	sub	sp, #56	; 0x38
 800423c:	af04      	add	r7, sp, #16
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
 8004244:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10a      	bne.n	8004262 <xTaskCreateStatic+0x2a>
	__asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	623b      	str	r3, [r7, #32]
}
 800425e:	bf00      	nop
 8004260:	e7fe      	b.n	8004260 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <xTaskCreateStatic+0x46>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	61fb      	str	r3, [r7, #28]
}
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800427e:	235c      	movs	r3, #92	; 0x5c
 8004280:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b5c      	cmp	r3, #92	; 0x5c
 8004286:	d00a      	beq.n	800429e <xTaskCreateStatic+0x66>
	__asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	61bb      	str	r3, [r7, #24]
}
 800429a:	bf00      	nop
 800429c:	e7fe      	b.n	800429c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800429e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01e      	beq.n	80042e4 <xTaskCreateStatic+0xac>
 80042a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01b      	beq.n	80042e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	2202      	movs	r2, #2
 80042ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042be:	2300      	movs	r3, #0
 80042c0:	9303      	str	r3, [sp, #12]
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	9302      	str	r3, [sp, #8]
 80042c6:	f107 0314 	add.w	r3, r7, #20
 80042ca:	9301      	str	r3, [sp, #4]
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	68b9      	ldr	r1, [r7, #8]
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f850 	bl	800437c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042de:	f000 f8dd 	bl	800449c <prvAddNewTaskToReadyList>
 80042e2:	e001      	b.n	80042e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042e8:	697b      	ldr	r3, [r7, #20]
	}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3728      	adds	r7, #40	; 0x28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b08c      	sub	sp, #48	; 0x30
 80042f6:	af04      	add	r7, sp, #16
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	603b      	str	r3, [r7, #0]
 80042fe:	4613      	mov	r3, r2
 8004300:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4618      	mov	r0, r3
 8004308:	f001 fc2e 	bl	8005b68 <pvPortMalloc>
 800430c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00e      	beq.n	8004332 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004314:	205c      	movs	r0, #92	; 0x5c
 8004316:	f001 fc27 	bl	8005b68 <pvPortMalloc>
 800431a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
 8004328:	e005      	b.n	8004336 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800432a:	6978      	ldr	r0, [r7, #20]
 800432c:	f001 fce8 	bl	8005d00 <vPortFree>
 8004330:	e001      	b.n	8004336 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d017      	beq.n	800436c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004344:	88fa      	ldrh	r2, [r7, #6]
 8004346:	2300      	movs	r3, #0
 8004348:	9303      	str	r3, [sp, #12]
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	9302      	str	r3, [sp, #8]
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	9301      	str	r3, [sp, #4]
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68b9      	ldr	r1, [r7, #8]
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f80e 	bl	800437c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004360:	69f8      	ldr	r0, [r7, #28]
 8004362:	f000 f89b 	bl	800449c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004366:	2301      	movs	r3, #1
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	e002      	b.n	8004372 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800436c:	f04f 33ff 	mov.w	r3, #4294967295
 8004370:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004372:	69bb      	ldr	r3, [r7, #24]
	}
 8004374:	4618      	mov	r0, r3
 8004376:	3720      	adds	r7, #32
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	461a      	mov	r2, r3
 8004394:	21a5      	movs	r1, #165	; 0xa5
 8004396:	f001 fdd1 	bl	8005f3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043a4:	3b01      	subs	r3, #1
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	f023 0307 	bic.w	r3, r3, #7
 80043b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	617b      	str	r3, [r7, #20]
}
 80043d0:	bf00      	nop
 80043d2:	e7fe      	b.n	80043d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d01f      	beq.n	800441a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
 80043de:	e012      	b.n	8004406 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	4413      	add	r3, r2
 80043e6:	7819      	ldrb	r1, [r3, #0]
 80043e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	4413      	add	r3, r2
 80043ee:	3334      	adds	r3, #52	; 0x34
 80043f0:	460a      	mov	r2, r1
 80043f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	4413      	add	r3, r2
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d006      	beq.n	800440e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	3301      	adds	r3, #1
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	2b0f      	cmp	r3, #15
 800440a:	d9e9      	bls.n	80043e0 <prvInitialiseNewTask+0x64>
 800440c:	e000      	b.n	8004410 <prvInitialiseNewTask+0x94>
			{
				break;
 800440e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004418:	e003      	b.n	8004422 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004424:	2b37      	cmp	r3, #55	; 0x37
 8004426:	d901      	bls.n	800442c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004428:	2337      	movs	r3, #55	; 0x37
 800442a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004430:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004436:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	2200      	movs	r2, #0
 800443c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	3304      	adds	r3, #4
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff f978 	bl	8003738 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444a:	3318      	adds	r3, #24
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff f973 	bl	8003738 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004456:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004466:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	2200      	movs	r2, #0
 800446c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	68f9      	ldr	r1, [r7, #12]
 800447a:	69b8      	ldr	r0, [r7, #24]
 800447c:	f001 f928 	bl	80056d0 <pxPortInitialiseStack>
 8004480:	4602      	mov	r2, r0
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004490:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004492:	bf00      	nop
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044a4:	f001 fa3e 	bl	8005924 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044a8:	4b2d      	ldr	r3, [pc, #180]	; (8004560 <prvAddNewTaskToReadyList+0xc4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3301      	adds	r3, #1
 80044ae:	4a2c      	ldr	r2, [pc, #176]	; (8004560 <prvAddNewTaskToReadyList+0xc4>)
 80044b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044b2:	4b2c      	ldr	r3, [pc, #176]	; (8004564 <prvAddNewTaskToReadyList+0xc8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d109      	bne.n	80044ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044ba:	4a2a      	ldr	r2, [pc, #168]	; (8004564 <prvAddNewTaskToReadyList+0xc8>)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044c0:	4b27      	ldr	r3, [pc, #156]	; (8004560 <prvAddNewTaskToReadyList+0xc4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d110      	bne.n	80044ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044c8:	f000 fc16 	bl	8004cf8 <prvInitialiseTaskLists>
 80044cc:	e00d      	b.n	80044ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044ce:	4b26      	ldr	r3, [pc, #152]	; (8004568 <prvAddNewTaskToReadyList+0xcc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044d6:	4b23      	ldr	r3, [pc, #140]	; (8004564 <prvAddNewTaskToReadyList+0xc8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d802      	bhi.n	80044ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044e4:	4a1f      	ldr	r2, [pc, #124]	; (8004564 <prvAddNewTaskToReadyList+0xc8>)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044ea:	4b20      	ldr	r3, [pc, #128]	; (800456c <prvAddNewTaskToReadyList+0xd0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3301      	adds	r3, #1
 80044f0:	4a1e      	ldr	r2, [pc, #120]	; (800456c <prvAddNewTaskToReadyList+0xd0>)
 80044f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80044f4:	4b1d      	ldr	r3, [pc, #116]	; (800456c <prvAddNewTaskToReadyList+0xd0>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004500:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <prvAddNewTaskToReadyList+0xd4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d903      	bls.n	8004510 <prvAddNewTaskToReadyList+0x74>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	4a18      	ldr	r2, [pc, #96]	; (8004570 <prvAddNewTaskToReadyList+0xd4>)
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4a15      	ldr	r2, [pc, #84]	; (8004574 <prvAddNewTaskToReadyList+0xd8>)
 800451e:	441a      	add	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3304      	adds	r3, #4
 8004524:	4619      	mov	r1, r3
 8004526:	4610      	mov	r0, r2
 8004528:	f7ff f913 	bl	8003752 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800452c:	f001 fa2a 	bl	8005984 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004530:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <prvAddNewTaskToReadyList+0xcc>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00e      	beq.n	8004556 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004538:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <prvAddNewTaskToReadyList+0xc8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	429a      	cmp	r2, r3
 8004544:	d207      	bcs.n	8004556 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004546:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <prvAddNewTaskToReadyList+0xdc>)
 8004548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	20000c98 	.word	0x20000c98
 8004564:	200007c4 	.word	0x200007c4
 8004568:	20000ca4 	.word	0x20000ca4
 800456c:	20000cb4 	.word	0x20000cb4
 8004570:	20000ca0 	.word	0x20000ca0
 8004574:	200007c8 	.word	0x200007c8
 8004578:	e000ed04 	.word	0xe000ed04

0800457c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d017      	beq.n	80045be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800458e:	4b13      	ldr	r3, [pc, #76]	; (80045dc <vTaskDelay+0x60>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <vTaskDelay+0x30>
	__asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	60bb      	str	r3, [r7, #8]
}
 80045a8:	bf00      	nop
 80045aa:	e7fe      	b.n	80045aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80045ac:	f000 f880 	bl	80046b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045b0:	2100      	movs	r1, #0
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fcea 	bl	8004f8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045b8:	f000 f888 	bl	80046cc <xTaskResumeAll>
 80045bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d107      	bne.n	80045d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80045c4:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <vTaskDelay+0x64>)
 80045c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045d4:	bf00      	nop
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20000cc0 	.word	0x20000cc0
 80045e0:	e000ed04 	.word	0xe000ed04

080045e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08a      	sub	sp, #40	; 0x28
 80045e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045f2:	463a      	mov	r2, r7
 80045f4:	1d39      	adds	r1, r7, #4
 80045f6:	f107 0308 	add.w	r3, r7, #8
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff f848 	bl	8003690 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004600:	6839      	ldr	r1, [r7, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	9202      	str	r2, [sp, #8]
 8004608:	9301      	str	r3, [sp, #4]
 800460a:	2300      	movs	r3, #0
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	2300      	movs	r3, #0
 8004610:	460a      	mov	r2, r1
 8004612:	4921      	ldr	r1, [pc, #132]	; (8004698 <vTaskStartScheduler+0xb4>)
 8004614:	4821      	ldr	r0, [pc, #132]	; (800469c <vTaskStartScheduler+0xb8>)
 8004616:	f7ff fe0f 	bl	8004238 <xTaskCreateStatic>
 800461a:	4603      	mov	r3, r0
 800461c:	4a20      	ldr	r2, [pc, #128]	; (80046a0 <vTaskStartScheduler+0xbc>)
 800461e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004620:	4b1f      	ldr	r3, [pc, #124]	; (80046a0 <vTaskStartScheduler+0xbc>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004628:	2301      	movs	r3, #1
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	e001      	b.n	8004632 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800462e:	2300      	movs	r3, #0
 8004630:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d102      	bne.n	800463e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004638:	f000 fcfc 	bl	8005034 <xTimerCreateTimerTask>
 800463c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d116      	bne.n	8004672 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	613b      	str	r3, [r7, #16]
}
 8004656:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004658:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <vTaskStartScheduler+0xc0>)
 800465a:	f04f 32ff 	mov.w	r2, #4294967295
 800465e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004660:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <vTaskStartScheduler+0xc4>)
 8004662:	2201      	movs	r2, #1
 8004664:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004666:	4b11      	ldr	r3, [pc, #68]	; (80046ac <vTaskStartScheduler+0xc8>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800466c:	f001 f8b8 	bl	80057e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004670:	e00e      	b.n	8004690 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004678:	d10a      	bne.n	8004690 <vTaskStartScheduler+0xac>
	__asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	60fb      	str	r3, [r7, #12]
}
 800468c:	bf00      	nop
 800468e:	e7fe      	b.n	800468e <vTaskStartScheduler+0xaa>
}
 8004690:	bf00      	nop
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	08005fd4 	.word	0x08005fd4
 800469c:	08004cc9 	.word	0x08004cc9
 80046a0:	20000cbc 	.word	0x20000cbc
 80046a4:	20000cb8 	.word	0x20000cb8
 80046a8:	20000ca4 	.word	0x20000ca4
 80046ac:	20000c9c 	.word	0x20000c9c

080046b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80046b4:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <vTaskSuspendAll+0x18>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3301      	adds	r3, #1
 80046ba:	4a03      	ldr	r2, [pc, #12]	; (80046c8 <vTaskSuspendAll+0x18>)
 80046bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80046be:	bf00      	nop
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	20000cc0 	.word	0x20000cc0

080046cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046d6:	2300      	movs	r3, #0
 80046d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046da:	4b42      	ldr	r3, [pc, #264]	; (80047e4 <xTaskResumeAll+0x118>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10a      	bne.n	80046f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	603b      	str	r3, [r7, #0]
}
 80046f4:	bf00      	nop
 80046f6:	e7fe      	b.n	80046f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046f8:	f001 f914 	bl	8005924 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046fc:	4b39      	ldr	r3, [pc, #228]	; (80047e4 <xTaskResumeAll+0x118>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3b01      	subs	r3, #1
 8004702:	4a38      	ldr	r2, [pc, #224]	; (80047e4 <xTaskResumeAll+0x118>)
 8004704:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004706:	4b37      	ldr	r3, [pc, #220]	; (80047e4 <xTaskResumeAll+0x118>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d162      	bne.n	80047d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800470e:	4b36      	ldr	r3, [pc, #216]	; (80047e8 <xTaskResumeAll+0x11c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d05e      	beq.n	80047d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004716:	e02f      	b.n	8004778 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004718:	4b34      	ldr	r3, [pc, #208]	; (80047ec <xTaskResumeAll+0x120>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3318      	adds	r3, #24
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff f871 	bl	800380c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	3304      	adds	r3, #4
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff f86c 	bl	800380c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004738:	4b2d      	ldr	r3, [pc, #180]	; (80047f0 <xTaskResumeAll+0x124>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d903      	bls.n	8004748 <xTaskResumeAll+0x7c>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	4a2a      	ldr	r2, [pc, #168]	; (80047f0 <xTaskResumeAll+0x124>)
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474c:	4613      	mov	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4a27      	ldr	r2, [pc, #156]	; (80047f4 <xTaskResumeAll+0x128>)
 8004756:	441a      	add	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3304      	adds	r3, #4
 800475c:	4619      	mov	r1, r3
 800475e:	4610      	mov	r0, r2
 8004760:	f7fe fff7 	bl	8003752 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004768:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <xTaskResumeAll+0x12c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	429a      	cmp	r2, r3
 8004770:	d302      	bcc.n	8004778 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004772:	4b22      	ldr	r3, [pc, #136]	; (80047fc <xTaskResumeAll+0x130>)
 8004774:	2201      	movs	r2, #1
 8004776:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004778:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <xTaskResumeAll+0x120>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1cb      	bne.n	8004718 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004786:	f000 fb55 	bl	8004e34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800478a:	4b1d      	ldr	r3, [pc, #116]	; (8004800 <xTaskResumeAll+0x134>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d010      	beq.n	80047b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004796:	f000 f847 	bl	8004828 <xTaskIncrementTick>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80047a0:	4b16      	ldr	r3, [pc, #88]	; (80047fc <xTaskResumeAll+0x130>)
 80047a2:	2201      	movs	r2, #1
 80047a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3b01      	subs	r3, #1
 80047aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f1      	bne.n	8004796 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80047b2:	4b13      	ldr	r3, [pc, #76]	; (8004800 <xTaskResumeAll+0x134>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047b8:	4b10      	ldr	r3, [pc, #64]	; (80047fc <xTaskResumeAll+0x130>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d009      	beq.n	80047d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047c0:	2301      	movs	r3, #1
 80047c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047c4:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <xTaskResumeAll+0x138>)
 80047c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047d4:	f001 f8d6 	bl	8005984 <vPortExitCritical>

	return xAlreadyYielded;
 80047d8:	68bb      	ldr	r3, [r7, #8]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20000cc0 	.word	0x20000cc0
 80047e8:	20000c98 	.word	0x20000c98
 80047ec:	20000c58 	.word	0x20000c58
 80047f0:	20000ca0 	.word	0x20000ca0
 80047f4:	200007c8 	.word	0x200007c8
 80047f8:	200007c4 	.word	0x200007c4
 80047fc:	20000cac 	.word	0x20000cac
 8004800:	20000ca8 	.word	0x20000ca8
 8004804:	e000ed04 	.word	0xe000ed04

08004808 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800480e:	4b05      	ldr	r3, [pc, #20]	; (8004824 <xTaskGetTickCount+0x1c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004814:	687b      	ldr	r3, [r7, #4]
}
 8004816:	4618      	mov	r0, r3
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	20000c9c 	.word	0x20000c9c

08004828 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800482e:	2300      	movs	r3, #0
 8004830:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004832:	4b4f      	ldr	r3, [pc, #316]	; (8004970 <xTaskIncrementTick+0x148>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f040 808f 	bne.w	800495a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800483c:	4b4d      	ldr	r3, [pc, #308]	; (8004974 <xTaskIncrementTick+0x14c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3301      	adds	r3, #1
 8004842:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004844:	4a4b      	ldr	r2, [pc, #300]	; (8004974 <xTaskIncrementTick+0x14c>)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d120      	bne.n	8004892 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004850:	4b49      	ldr	r3, [pc, #292]	; (8004978 <xTaskIncrementTick+0x150>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <xTaskIncrementTick+0x48>
	__asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	603b      	str	r3, [r7, #0]
}
 800486c:	bf00      	nop
 800486e:	e7fe      	b.n	800486e <xTaskIncrementTick+0x46>
 8004870:	4b41      	ldr	r3, [pc, #260]	; (8004978 <xTaskIncrementTick+0x150>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	4b41      	ldr	r3, [pc, #260]	; (800497c <xTaskIncrementTick+0x154>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a3f      	ldr	r2, [pc, #252]	; (8004978 <xTaskIncrementTick+0x150>)
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	4a3f      	ldr	r2, [pc, #252]	; (800497c <xTaskIncrementTick+0x154>)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6013      	str	r3, [r2, #0]
 8004884:	4b3e      	ldr	r3, [pc, #248]	; (8004980 <xTaskIncrementTick+0x158>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3301      	adds	r3, #1
 800488a:	4a3d      	ldr	r2, [pc, #244]	; (8004980 <xTaskIncrementTick+0x158>)
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	f000 fad1 	bl	8004e34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004892:	4b3c      	ldr	r3, [pc, #240]	; (8004984 <xTaskIncrementTick+0x15c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	429a      	cmp	r2, r3
 800489a:	d349      	bcc.n	8004930 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800489c:	4b36      	ldr	r3, [pc, #216]	; (8004978 <xTaskIncrementTick+0x150>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d104      	bne.n	80048b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048a6:	4b37      	ldr	r3, [pc, #220]	; (8004984 <xTaskIncrementTick+0x15c>)
 80048a8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ac:	601a      	str	r2, [r3, #0]
					break;
 80048ae:	e03f      	b.n	8004930 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048b0:	4b31      	ldr	r3, [pc, #196]	; (8004978 <xTaskIncrementTick+0x150>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d203      	bcs.n	80048d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048c8:	4a2e      	ldr	r2, [pc, #184]	; (8004984 <xTaskIncrementTick+0x15c>)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048ce:	e02f      	b.n	8004930 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	3304      	adds	r3, #4
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7fe ff99 	bl	800380c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d004      	beq.n	80048ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	3318      	adds	r3, #24
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fe ff90 	bl	800380c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f0:	4b25      	ldr	r3, [pc, #148]	; (8004988 <xTaskIncrementTick+0x160>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d903      	bls.n	8004900 <xTaskIncrementTick+0xd8>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	4a22      	ldr	r2, [pc, #136]	; (8004988 <xTaskIncrementTick+0x160>)
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4a1f      	ldr	r2, [pc, #124]	; (800498c <xTaskIncrementTick+0x164>)
 800490e:	441a      	add	r2, r3
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	3304      	adds	r3, #4
 8004914:	4619      	mov	r1, r3
 8004916:	4610      	mov	r0, r2
 8004918:	f7fe ff1b 	bl	8003752 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004920:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <xTaskIncrementTick+0x168>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	429a      	cmp	r2, r3
 8004928:	d3b8      	bcc.n	800489c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800492a:	2301      	movs	r3, #1
 800492c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800492e:	e7b5      	b.n	800489c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004930:	4b17      	ldr	r3, [pc, #92]	; (8004990 <xTaskIncrementTick+0x168>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004936:	4915      	ldr	r1, [pc, #84]	; (800498c <xTaskIncrementTick+0x164>)
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d901      	bls.n	800494c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004948:	2301      	movs	r3, #1
 800494a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800494c:	4b11      	ldr	r3, [pc, #68]	; (8004994 <xTaskIncrementTick+0x16c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d007      	beq.n	8004964 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004954:	2301      	movs	r3, #1
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	e004      	b.n	8004964 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800495a:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <xTaskIncrementTick+0x170>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3301      	adds	r3, #1
 8004960:	4a0d      	ldr	r2, [pc, #52]	; (8004998 <xTaskIncrementTick+0x170>)
 8004962:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004964:	697b      	ldr	r3, [r7, #20]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20000cc0 	.word	0x20000cc0
 8004974:	20000c9c 	.word	0x20000c9c
 8004978:	20000c50 	.word	0x20000c50
 800497c:	20000c54 	.word	0x20000c54
 8004980:	20000cb0 	.word	0x20000cb0
 8004984:	20000cb8 	.word	0x20000cb8
 8004988:	20000ca0 	.word	0x20000ca0
 800498c:	200007c8 	.word	0x200007c8
 8004990:	200007c4 	.word	0x200007c4
 8004994:	20000cac 	.word	0x20000cac
 8004998:	20000ca8 	.word	0x20000ca8

0800499c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049a2:	4b28      	ldr	r3, [pc, #160]	; (8004a44 <vTaskSwitchContext+0xa8>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049aa:	4b27      	ldr	r3, [pc, #156]	; (8004a48 <vTaskSwitchContext+0xac>)
 80049ac:	2201      	movs	r2, #1
 80049ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049b0:	e041      	b.n	8004a36 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80049b2:	4b25      	ldr	r3, [pc, #148]	; (8004a48 <vTaskSwitchContext+0xac>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049b8:	4b24      	ldr	r3, [pc, #144]	; (8004a4c <vTaskSwitchContext+0xb0>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	e010      	b.n	80049e2 <vTaskSwitchContext+0x46>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10a      	bne.n	80049dc <vTaskSwitchContext+0x40>
	__asm volatile
 80049c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	607b      	str	r3, [r7, #4]
}
 80049d8:	bf00      	nop
 80049da:	e7fe      	b.n	80049da <vTaskSwitchContext+0x3e>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3b01      	subs	r3, #1
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	491b      	ldr	r1, [pc, #108]	; (8004a50 <vTaskSwitchContext+0xb4>)
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	440b      	add	r3, r1
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0e4      	beq.n	80049c0 <vTaskSwitchContext+0x24>
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4a13      	ldr	r2, [pc, #76]	; (8004a50 <vTaskSwitchContext+0xb4>)
 8004a02:	4413      	add	r3, r2
 8004a04:	60bb      	str	r3, [r7, #8]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	605a      	str	r2, [r3, #4]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	3308      	adds	r3, #8
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d104      	bne.n	8004a26 <vTaskSwitchContext+0x8a>
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	605a      	str	r2, [r3, #4]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	4a09      	ldr	r2, [pc, #36]	; (8004a54 <vTaskSwitchContext+0xb8>)
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	4a06      	ldr	r2, [pc, #24]	; (8004a4c <vTaskSwitchContext+0xb0>)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6013      	str	r3, [r2, #0]
}
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	20000cc0 	.word	0x20000cc0
 8004a48:	20000cac 	.word	0x20000cac
 8004a4c:	20000ca0 	.word	0x20000ca0
 8004a50:	200007c8 	.word	0x200007c8
 8004a54:	200007c4 	.word	0x200007c4

08004a58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	60fb      	str	r3, [r7, #12]
}
 8004a7a:	bf00      	nop
 8004a7c:	e7fe      	b.n	8004a7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a7e:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <vTaskPlaceOnEventList+0x44>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3318      	adds	r3, #24
 8004a84:	4619      	mov	r1, r3
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fe fe87 	bl	800379a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	6838      	ldr	r0, [r7, #0]
 8004a90:	f000 fa7c 	bl	8004f8c <prvAddCurrentTaskToDelayedList>
}
 8004a94:	bf00      	nop
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	200007c4 	.word	0x200007c4

08004aa0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10a      	bne.n	8004ac8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	617b      	str	r3, [r7, #20]
}
 8004ac4:	bf00      	nop
 8004ac6:	e7fe      	b.n	8004ac6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ac8:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <vTaskPlaceOnEventListRestricted+0x54>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3318      	adds	r3, #24
 8004ace:	4619      	mov	r1, r3
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f7fe fe3e 	bl	8003752 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004adc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	68b8      	ldr	r0, [r7, #8]
 8004ae6:	f000 fa51 	bl	8004f8c <prvAddCurrentTaskToDelayedList>
	}
 8004aea:	bf00      	nop
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	200007c4 	.word	0x200007c4

08004af8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10a      	bne.n	8004b24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	60fb      	str	r3, [r7, #12]
}
 8004b20:	bf00      	nop
 8004b22:	e7fe      	b.n	8004b22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	3318      	adds	r3, #24
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fe fe6f 	bl	800380c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b2e:	4b1e      	ldr	r3, [pc, #120]	; (8004ba8 <xTaskRemoveFromEventList+0xb0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d11d      	bne.n	8004b72 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe fe66 	bl	800380c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b44:	4b19      	ldr	r3, [pc, #100]	; (8004bac <xTaskRemoveFromEventList+0xb4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d903      	bls.n	8004b54 <xTaskRemoveFromEventList+0x5c>
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	4a16      	ldr	r2, [pc, #88]	; (8004bac <xTaskRemoveFromEventList+0xb4>)
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b58:	4613      	mov	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4a13      	ldr	r2, [pc, #76]	; (8004bb0 <xTaskRemoveFromEventList+0xb8>)
 8004b62:	441a      	add	r2, r3
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	3304      	adds	r3, #4
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f7fe fdf1 	bl	8003752 <vListInsertEnd>
 8004b70:	e005      	b.n	8004b7e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	3318      	adds	r3, #24
 8004b76:	4619      	mov	r1, r3
 8004b78:	480e      	ldr	r0, [pc, #56]	; (8004bb4 <xTaskRemoveFromEventList+0xbc>)
 8004b7a:	f7fe fdea 	bl	8003752 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b82:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <xTaskRemoveFromEventList+0xc0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d905      	bls.n	8004b98 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b90:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <xTaskRemoveFromEventList+0xc4>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	e001      	b.n	8004b9c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b9c:	697b      	ldr	r3, [r7, #20]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000cc0 	.word	0x20000cc0
 8004bac:	20000ca0 	.word	0x20000ca0
 8004bb0:	200007c8 	.word	0x200007c8
 8004bb4:	20000c58 	.word	0x20000c58
 8004bb8:	200007c4 	.word	0x200007c4
 8004bbc:	20000cac 	.word	0x20000cac

08004bc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bc8:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <vTaskInternalSetTimeOutState+0x24>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <vTaskInternalSetTimeOutState+0x28>)
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	605a      	str	r2, [r3, #4]
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	20000cb0 	.word	0x20000cb0
 8004be8:	20000c9c 	.word	0x20000c9c

08004bec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10a      	bne.n	8004c12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	613b      	str	r3, [r7, #16]
}
 8004c0e:	bf00      	nop
 8004c10:	e7fe      	b.n	8004c10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10a      	bne.n	8004c2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1c:	f383 8811 	msr	BASEPRI, r3
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	60fb      	str	r3, [r7, #12]
}
 8004c2a:	bf00      	nop
 8004c2c:	e7fe      	b.n	8004c2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004c2e:	f000 fe79 	bl	8005924 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c32:	4b1d      	ldr	r3, [pc, #116]	; (8004ca8 <xTaskCheckForTimeOut+0xbc>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4a:	d102      	bne.n	8004c52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	61fb      	str	r3, [r7, #28]
 8004c50:	e023      	b.n	8004c9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	4b15      	ldr	r3, [pc, #84]	; (8004cac <xTaskCheckForTimeOut+0xc0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d007      	beq.n	8004c6e <xTaskCheckForTimeOut+0x82>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d302      	bcc.n	8004c6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	61fb      	str	r3, [r7, #28]
 8004c6c:	e015      	b.n	8004c9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d20b      	bcs.n	8004c90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	1ad2      	subs	r2, r2, r3
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff ff9b 	bl	8004bc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61fb      	str	r3, [r7, #28]
 8004c8e:	e004      	b.n	8004c9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c96:	2301      	movs	r3, #1
 8004c98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c9a:	f000 fe73 	bl	8005984 <vPortExitCritical>

	return xReturn;
 8004c9e:	69fb      	ldr	r3, [r7, #28]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3720      	adds	r7, #32
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20000c9c 	.word	0x20000c9c
 8004cac:	20000cb0 	.word	0x20000cb0

08004cb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004cb4:	4b03      	ldr	r3, [pc, #12]	; (8004cc4 <vTaskMissedYield+0x14>)
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]
}
 8004cba:	bf00      	nop
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	20000cac 	.word	0x20000cac

08004cc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cd0:	f000 f852 	bl	8004d78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cd4:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <prvIdleTask+0x28>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d9f9      	bls.n	8004cd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <prvIdleTask+0x2c>)
 8004cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cec:	e7f0      	b.n	8004cd0 <prvIdleTask+0x8>
 8004cee:	bf00      	nop
 8004cf0:	200007c8 	.word	0x200007c8
 8004cf4:	e000ed04 	.word	0xe000ed04

08004cf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cfe:	2300      	movs	r3, #0
 8004d00:	607b      	str	r3, [r7, #4]
 8004d02:	e00c      	b.n	8004d1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4a12      	ldr	r2, [pc, #72]	; (8004d58 <prvInitialiseTaskLists+0x60>)
 8004d10:	4413      	add	r3, r2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fe fcf0 	bl	80036f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	607b      	str	r3, [r7, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b37      	cmp	r3, #55	; 0x37
 8004d22:	d9ef      	bls.n	8004d04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d24:	480d      	ldr	r0, [pc, #52]	; (8004d5c <prvInitialiseTaskLists+0x64>)
 8004d26:	f7fe fce7 	bl	80036f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d2a:	480d      	ldr	r0, [pc, #52]	; (8004d60 <prvInitialiseTaskLists+0x68>)
 8004d2c:	f7fe fce4 	bl	80036f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d30:	480c      	ldr	r0, [pc, #48]	; (8004d64 <prvInitialiseTaskLists+0x6c>)
 8004d32:	f7fe fce1 	bl	80036f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d36:	480c      	ldr	r0, [pc, #48]	; (8004d68 <prvInitialiseTaskLists+0x70>)
 8004d38:	f7fe fcde 	bl	80036f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d3c:	480b      	ldr	r0, [pc, #44]	; (8004d6c <prvInitialiseTaskLists+0x74>)
 8004d3e:	f7fe fcdb 	bl	80036f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d42:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <prvInitialiseTaskLists+0x78>)
 8004d44:	4a05      	ldr	r2, [pc, #20]	; (8004d5c <prvInitialiseTaskLists+0x64>)
 8004d46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d48:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <prvInitialiseTaskLists+0x7c>)
 8004d4a:	4a05      	ldr	r2, [pc, #20]	; (8004d60 <prvInitialiseTaskLists+0x68>)
 8004d4c:	601a      	str	r2, [r3, #0]
}
 8004d4e:	bf00      	nop
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	200007c8 	.word	0x200007c8
 8004d5c:	20000c28 	.word	0x20000c28
 8004d60:	20000c3c 	.word	0x20000c3c
 8004d64:	20000c58 	.word	0x20000c58
 8004d68:	20000c6c 	.word	0x20000c6c
 8004d6c:	20000c84 	.word	0x20000c84
 8004d70:	20000c50 	.word	0x20000c50
 8004d74:	20000c54 	.word	0x20000c54

08004d78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d7e:	e019      	b.n	8004db4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d80:	f000 fdd0 	bl	8005924 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d84:	4b10      	ldr	r3, [pc, #64]	; (8004dc8 <prvCheckTasksWaitingTermination+0x50>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fe fd3b 	bl	800380c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d96:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <prvCheckTasksWaitingTermination+0x54>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	4a0b      	ldr	r2, [pc, #44]	; (8004dcc <prvCheckTasksWaitingTermination+0x54>)
 8004d9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <prvCheckTasksWaitingTermination+0x58>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	4a0a      	ldr	r2, [pc, #40]	; (8004dd0 <prvCheckTasksWaitingTermination+0x58>)
 8004da8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004daa:	f000 fdeb 	bl	8005984 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f810 	bl	8004dd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004db4:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <prvCheckTasksWaitingTermination+0x58>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e1      	bne.n	8004d80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004dbc:	bf00      	nop
 8004dbe:	bf00      	nop
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000c6c 	.word	0x20000c6c
 8004dcc:	20000c98 	.word	0x20000c98
 8004dd0:	20000c80 	.word	0x20000c80

08004dd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d108      	bne.n	8004df8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 ff88 	bl	8005d00 <vPortFree>
				vPortFree( pxTCB );
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 ff85 	bl	8005d00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004df6:	e018      	b.n	8004e2a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d103      	bne.n	8004e0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 ff7c 	bl	8005d00 <vPortFree>
	}
 8004e08:	e00f      	b.n	8004e2a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d00a      	beq.n	8004e2a <prvDeleteTCB+0x56>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	60fb      	str	r3, [r7, #12]
}
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <prvDeleteTCB+0x54>
	}
 8004e2a:	bf00      	nop
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e3a:	4b0c      	ldr	r3, [pc, #48]	; (8004e6c <prvResetNextTaskUnblockTime+0x38>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d104      	bne.n	8004e4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e44:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <prvResetNextTaskUnblockTime+0x3c>)
 8004e46:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e4c:	e008      	b.n	8004e60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e4e:	4b07      	ldr	r3, [pc, #28]	; (8004e6c <prvResetNextTaskUnblockTime+0x38>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	4a04      	ldr	r2, [pc, #16]	; (8004e70 <prvResetNextTaskUnblockTime+0x3c>)
 8004e5e:	6013      	str	r3, [r2, #0]
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	20000c50 	.word	0x20000c50
 8004e70:	20000cb8 	.word	0x20000cb8

08004e74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <xTaskGetSchedulerState+0x34>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d102      	bne.n	8004e88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e82:	2301      	movs	r3, #1
 8004e84:	607b      	str	r3, [r7, #4]
 8004e86:	e008      	b.n	8004e9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e88:	4b08      	ldr	r3, [pc, #32]	; (8004eac <xTaskGetSchedulerState+0x38>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d102      	bne.n	8004e96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e90:	2302      	movs	r3, #2
 8004e92:	607b      	str	r3, [r7, #4]
 8004e94:	e001      	b.n	8004e9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e96:	2300      	movs	r3, #0
 8004e98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e9a:	687b      	ldr	r3, [r7, #4]
	}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	20000ca4 	.word	0x20000ca4
 8004eac:	20000cc0 	.word	0x20000cc0

08004eb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d056      	beq.n	8004f74 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ec6:	4b2e      	ldr	r3, [pc, #184]	; (8004f80 <xTaskPriorityDisinherit+0xd0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d00a      	beq.n	8004ee6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	60fb      	str	r3, [r7, #12]
}
 8004ee2:	bf00      	nop
 8004ee4:	e7fe      	b.n	8004ee4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10a      	bne.n	8004f04 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	60bb      	str	r3, [r7, #8]
}
 8004f00:	bf00      	nop
 8004f02:	e7fe      	b.n	8004f02 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f08:	1e5a      	subs	r2, r3, #1
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d02c      	beq.n	8004f74 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d128      	bne.n	8004f74 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fe fc70 	bl	800380c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f44:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <xTaskPriorityDisinherit+0xd4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d903      	bls.n	8004f54 <xTaskPriorityDisinherit+0xa4>
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	4a0c      	ldr	r2, [pc, #48]	; (8004f84 <xTaskPriorityDisinherit+0xd4>)
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4a09      	ldr	r2, [pc, #36]	; (8004f88 <xTaskPriorityDisinherit+0xd8>)
 8004f62:	441a      	add	r2, r3
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	3304      	adds	r3, #4
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	f7fe fbf1 	bl	8003752 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f70:	2301      	movs	r3, #1
 8004f72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f74:	697b      	ldr	r3, [r7, #20]
	}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	200007c4 	.word	0x200007c4
 8004f84:	20000ca0 	.word	0x20000ca0
 8004f88:	200007c8 	.word	0x200007c8

08004f8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f96:	4b21      	ldr	r3, [pc, #132]	; (800501c <prvAddCurrentTaskToDelayedList+0x90>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f9c:	4b20      	ldr	r3, [pc, #128]	; (8005020 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fe fc32 	bl	800380c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fae:	d10a      	bne.n	8004fc6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d007      	beq.n	8004fc6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fb6:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4819      	ldr	r0, [pc, #100]	; (8005024 <prvAddCurrentTaskToDelayedList+0x98>)
 8004fc0:	f7fe fbc7 	bl	8003752 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fc4:	e026      	b.n	8005014 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4413      	add	r3, r2
 8004fcc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fce:	4b14      	ldr	r3, [pc, #80]	; (8005020 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d209      	bcs.n	8004ff2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fde:	4b12      	ldr	r3, [pc, #72]	; (8005028 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	4b0f      	ldr	r3, [pc, #60]	; (8005020 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4610      	mov	r0, r2
 8004fec:	f7fe fbd5 	bl	800379a <vListInsert>
}
 8004ff0:	e010      	b.n	8005014 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ff2:	4b0e      	ldr	r3, [pc, #56]	; (800502c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4610      	mov	r0, r2
 8005000:	f7fe fbcb 	bl	800379a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005004:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	429a      	cmp	r2, r3
 800500c:	d202      	bcs.n	8005014 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800500e:	4a08      	ldr	r2, [pc, #32]	; (8005030 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	6013      	str	r3, [r2, #0]
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	20000c9c 	.word	0x20000c9c
 8005020:	200007c4 	.word	0x200007c4
 8005024:	20000c84 	.word	0x20000c84
 8005028:	20000c54 	.word	0x20000c54
 800502c:	20000c50 	.word	0x20000c50
 8005030:	20000cb8 	.word	0x20000cb8

08005034 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08a      	sub	sp, #40	; 0x28
 8005038:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800503a:	2300      	movs	r3, #0
 800503c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800503e:	f000 fb07 	bl	8005650 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005042:	4b1c      	ldr	r3, [pc, #112]	; (80050b4 <xTimerCreateTimerTask+0x80>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d021      	beq.n	800508e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005052:	1d3a      	adds	r2, r7, #4
 8005054:	f107 0108 	add.w	r1, r7, #8
 8005058:	f107 030c 	add.w	r3, r7, #12
 800505c:	4618      	mov	r0, r3
 800505e:	f7fe fb31 	bl	80036c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	9202      	str	r2, [sp, #8]
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	2302      	movs	r3, #2
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	2300      	movs	r3, #0
 8005072:	460a      	mov	r2, r1
 8005074:	4910      	ldr	r1, [pc, #64]	; (80050b8 <xTimerCreateTimerTask+0x84>)
 8005076:	4811      	ldr	r0, [pc, #68]	; (80050bc <xTimerCreateTimerTask+0x88>)
 8005078:	f7ff f8de 	bl	8004238 <xTaskCreateStatic>
 800507c:	4603      	mov	r3, r0
 800507e:	4a10      	ldr	r2, [pc, #64]	; (80050c0 <xTimerCreateTimerTask+0x8c>)
 8005080:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005082:	4b0f      	ldr	r3, [pc, #60]	; (80050c0 <xTimerCreateTimerTask+0x8c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800508a:	2301      	movs	r3, #1
 800508c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10a      	bne.n	80050aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	613b      	str	r3, [r7, #16]
}
 80050a6:	bf00      	nop
 80050a8:	e7fe      	b.n	80050a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80050aa:	697b      	ldr	r3, [r7, #20]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	20000cf4 	.word	0x20000cf4
 80050b8:	08005fdc 	.word	0x08005fdc
 80050bc:	080051f9 	.word	0x080051f9
 80050c0:	20000cf8 	.word	0x20000cf8

080050c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b08a      	sub	sp, #40	; 0x28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	623b      	str	r3, [r7, #32]
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80050f2:	4b1a      	ldr	r3, [pc, #104]	; (800515c <xTimerGenericCommand+0x98>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d02a      	beq.n	8005150 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b05      	cmp	r3, #5
 800510a:	dc18      	bgt.n	800513e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800510c:	f7ff feb2 	bl	8004e74 <xTaskGetSchedulerState>
 8005110:	4603      	mov	r3, r0
 8005112:	2b02      	cmp	r3, #2
 8005114:	d109      	bne.n	800512a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005116:	4b11      	ldr	r3, [pc, #68]	; (800515c <xTimerGenericCommand+0x98>)
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	f107 0110 	add.w	r1, r7, #16
 800511e:	2300      	movs	r3, #0
 8005120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005122:	f7fe fca1 	bl	8003a68 <xQueueGenericSend>
 8005126:	6278      	str	r0, [r7, #36]	; 0x24
 8005128:	e012      	b.n	8005150 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800512a:	4b0c      	ldr	r3, [pc, #48]	; (800515c <xTimerGenericCommand+0x98>)
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	f107 0110 	add.w	r1, r7, #16
 8005132:	2300      	movs	r3, #0
 8005134:	2200      	movs	r2, #0
 8005136:	f7fe fc97 	bl	8003a68 <xQueueGenericSend>
 800513a:	6278      	str	r0, [r7, #36]	; 0x24
 800513c:	e008      	b.n	8005150 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800513e:	4b07      	ldr	r3, [pc, #28]	; (800515c <xTimerGenericCommand+0x98>)
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	f107 0110 	add.w	r1, r7, #16
 8005146:	2300      	movs	r3, #0
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	f7fe fd8b 	bl	8003c64 <xQueueGenericSendFromISR>
 800514e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005152:	4618      	mov	r0, r3
 8005154:	3728      	adds	r7, #40	; 0x28
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000cf4 	.word	0x20000cf4

08005160 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af02      	add	r7, sp, #8
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800516a:	4b22      	ldr	r3, [pc, #136]	; (80051f4 <prvProcessExpiredTimer+0x94>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	3304      	adds	r3, #4
 8005178:	4618      	mov	r0, r3
 800517a:	f7fe fb47 	bl	800380c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d022      	beq.n	80051d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	699a      	ldr	r2, [r3, #24]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	18d1      	adds	r1, r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	6978      	ldr	r0, [r7, #20]
 800519a:	f000 f8d1 	bl	8005340 <prvInsertTimerInActiveList>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01f      	beq.n	80051e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051a4:	2300      	movs	r3, #0
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	2300      	movs	r3, #0
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	2100      	movs	r1, #0
 80051ae:	6978      	ldr	r0, [r7, #20]
 80051b0:	f7ff ff88 	bl	80050c4 <xTimerGenericCommand>
 80051b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d113      	bne.n	80051e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	60fb      	str	r3, [r7, #12]
}
 80051ce:	bf00      	nop
 80051d0:	e7fe      	b.n	80051d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051d8:	f023 0301 	bic.w	r3, r3, #1
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	6978      	ldr	r0, [r7, #20]
 80051ea:	4798      	blx	r3
}
 80051ec:	bf00      	nop
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	20000cec 	.word	0x20000cec

080051f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005200:	f107 0308 	add.w	r3, r7, #8
 8005204:	4618      	mov	r0, r3
 8005206:	f000 f857 	bl	80052b8 <prvGetNextExpireTime>
 800520a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4619      	mov	r1, r3
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f803 	bl	800521c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005216:	f000 f8d5 	bl	80053c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800521a:	e7f1      	b.n	8005200 <prvTimerTask+0x8>

0800521c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005226:	f7ff fa43 	bl	80046b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800522a:	f107 0308 	add.w	r3, r7, #8
 800522e:	4618      	mov	r0, r3
 8005230:	f000 f866 	bl	8005300 <prvSampleTimeNow>
 8005234:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d130      	bne.n	800529e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10a      	bne.n	8005258 <prvProcessTimerOrBlockTask+0x3c>
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	429a      	cmp	r2, r3
 8005248:	d806      	bhi.n	8005258 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800524a:	f7ff fa3f 	bl	80046cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800524e:	68f9      	ldr	r1, [r7, #12]
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7ff ff85 	bl	8005160 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005256:	e024      	b.n	80052a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800525e:	4b13      	ldr	r3, [pc, #76]	; (80052ac <prvProcessTimerOrBlockTask+0x90>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <prvProcessTimerOrBlockTask+0x50>
 8005268:	2301      	movs	r3, #1
 800526a:	e000      	b.n	800526e <prvProcessTimerOrBlockTask+0x52>
 800526c:	2300      	movs	r3, #0
 800526e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005270:	4b0f      	ldr	r3, [pc, #60]	; (80052b0 <prvProcessTimerOrBlockTask+0x94>)
 8005272:	6818      	ldr	r0, [r3, #0]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	4619      	mov	r1, r3
 800527e:	f7fe ffa7 	bl	80041d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005282:	f7ff fa23 	bl	80046cc <xTaskResumeAll>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10a      	bne.n	80052a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800528c:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <prvProcessTimerOrBlockTask+0x98>)
 800528e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	f3bf 8f6f 	isb	sy
}
 800529c:	e001      	b.n	80052a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800529e:	f7ff fa15 	bl	80046cc <xTaskResumeAll>
}
 80052a2:	bf00      	nop
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20000cf0 	.word	0x20000cf0
 80052b0:	20000cf4 	.word	0x20000cf4
 80052b4:	e000ed04 	.word	0xe000ed04

080052b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80052c0:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <prvGetNextExpireTime+0x44>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <prvGetNextExpireTime+0x16>
 80052ca:	2201      	movs	r2, #1
 80052cc:	e000      	b.n	80052d0 <prvGetNextExpireTime+0x18>
 80052ce:	2200      	movs	r2, #0
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d105      	bne.n	80052e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052dc:	4b07      	ldr	r3, [pc, #28]	; (80052fc <prvGetNextExpireTime+0x44>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	e001      	b.n	80052ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80052ec:	68fb      	ldr	r3, [r7, #12]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	20000cec 	.word	0x20000cec

08005300 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005308:	f7ff fa7e 	bl	8004808 <xTaskGetTickCount>
 800530c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800530e:	4b0b      	ldr	r3, [pc, #44]	; (800533c <prvSampleTimeNow+0x3c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	429a      	cmp	r2, r3
 8005316:	d205      	bcs.n	8005324 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005318:	f000 f936 	bl	8005588 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	e002      	b.n	800532a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800532a:	4a04      	ldr	r2, [pc, #16]	; (800533c <prvSampleTimeNow+0x3c>)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005330:	68fb      	ldr	r3, [r7, #12]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20000cfc 	.word	0x20000cfc

08005340 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800534e:	2300      	movs	r3, #0
 8005350:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	429a      	cmp	r2, r3
 8005364:	d812      	bhi.n	800538c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	1ad2      	subs	r2, r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	429a      	cmp	r2, r3
 8005372:	d302      	bcc.n	800537a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005374:	2301      	movs	r3, #1
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	e01b      	b.n	80053b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800537a:	4b10      	ldr	r3, [pc, #64]	; (80053bc <prvInsertTimerInActiveList+0x7c>)
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3304      	adds	r3, #4
 8005382:	4619      	mov	r1, r3
 8005384:	4610      	mov	r0, r2
 8005386:	f7fe fa08 	bl	800379a <vListInsert>
 800538a:	e012      	b.n	80053b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d206      	bcs.n	80053a2 <prvInsertTimerInActiveList+0x62>
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d302      	bcc.n	80053a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800539c:	2301      	movs	r3, #1
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	e007      	b.n	80053b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053a2:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <prvInsertTimerInActiveList+0x80>)
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3304      	adds	r3, #4
 80053aa:	4619      	mov	r1, r3
 80053ac:	4610      	mov	r0, r2
 80053ae:	f7fe f9f4 	bl	800379a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80053b2:	697b      	ldr	r3, [r7, #20]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3718      	adds	r7, #24
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	20000cf0 	.word	0x20000cf0
 80053c0:	20000cec 	.word	0x20000cec

080053c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08e      	sub	sp, #56	; 0x38
 80053c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053ca:	e0ca      	b.n	8005562 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	da18      	bge.n	8005404 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80053d2:	1d3b      	adds	r3, r7, #4
 80053d4:	3304      	adds	r3, #4
 80053d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80053d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10a      	bne.n	80053f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	61fb      	str	r3, [r7, #28]
}
 80053f0:	bf00      	nop
 80053f2:	e7fe      	b.n	80053f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80053f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053fa:	6850      	ldr	r0, [r2, #4]
 80053fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053fe:	6892      	ldr	r2, [r2, #8]
 8005400:	4611      	mov	r1, r2
 8005402:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	f2c0 80ab 	blt.w	8005562 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d004      	beq.n	8005422 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	3304      	adds	r3, #4
 800541c:	4618      	mov	r0, r3
 800541e:	f7fe f9f5 	bl	800380c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005422:	463b      	mov	r3, r7
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff ff6b 	bl	8005300 <prvSampleTimeNow>
 800542a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b09      	cmp	r3, #9
 8005430:	f200 8096 	bhi.w	8005560 <prvProcessReceivedCommands+0x19c>
 8005434:	a201      	add	r2, pc, #4	; (adr r2, 800543c <prvProcessReceivedCommands+0x78>)
 8005436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543a:	bf00      	nop
 800543c:	08005465 	.word	0x08005465
 8005440:	08005465 	.word	0x08005465
 8005444:	08005465 	.word	0x08005465
 8005448:	080054d9 	.word	0x080054d9
 800544c:	080054ed 	.word	0x080054ed
 8005450:	08005537 	.word	0x08005537
 8005454:	08005465 	.word	0x08005465
 8005458:	08005465 	.word	0x08005465
 800545c:	080054d9 	.word	0x080054d9
 8005460:	080054ed 	.word	0x080054ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005466:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800546a:	f043 0301 	orr.w	r3, r3, #1
 800546e:	b2da      	uxtb	r2, r3
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	18d1      	adds	r1, r2, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005484:	f7ff ff5c 	bl	8005340 <prvInsertTimerInActiveList>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d069      	beq.n	8005562 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800548e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005494:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d05e      	beq.n	8005562 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	441a      	add	r2, r3
 80054ac:	2300      	movs	r3, #0
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	2300      	movs	r3, #0
 80054b2:	2100      	movs	r1, #0
 80054b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054b6:	f7ff fe05 	bl	80050c4 <xTimerGenericCommand>
 80054ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d14f      	bne.n	8005562 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	61bb      	str	r3, [r7, #24]
}
 80054d4:	bf00      	nop
 80054d6:	e7fe      	b.n	80054d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054de:	f023 0301 	bic.w	r3, r3, #1
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80054ea:	e03a      	b.n	8005562 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054f2:	f043 0301 	orr.w	r3, r3, #1
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10a      	bne.n	8005522 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	617b      	str	r3, [r7, #20]
}
 800551e:	bf00      	nop
 8005520:	e7fe      	b.n	8005520 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005524:	699a      	ldr	r2, [r3, #24]
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	18d1      	adds	r1, r2, r3
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005530:	f7ff ff06 	bl	8005340 <prvInsertTimerInActiveList>
					break;
 8005534:	e015      	b.n	8005562 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d103      	bne.n	800554c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005546:	f000 fbdb 	bl	8005d00 <vPortFree>
 800554a:	e00a      	b.n	8005562 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005552:	f023 0301 	bic.w	r3, r3, #1
 8005556:	b2da      	uxtb	r2, r3
 8005558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800555e:	e000      	b.n	8005562 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005560:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005562:	4b08      	ldr	r3, [pc, #32]	; (8005584 <prvProcessReceivedCommands+0x1c0>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	1d39      	adds	r1, r7, #4
 8005568:	2200      	movs	r2, #0
 800556a:	4618      	mov	r0, r3
 800556c:	f7fe fc16 	bl	8003d9c <xQueueReceive>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	f47f af2a 	bne.w	80053cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005578:	bf00      	nop
 800557a:	bf00      	nop
 800557c:	3730      	adds	r7, #48	; 0x30
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20000cf4 	.word	0x20000cf4

08005588 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800558e:	e048      	b.n	8005622 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005590:	4b2d      	ldr	r3, [pc, #180]	; (8005648 <prvSwitchTimerLists+0xc0>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800559a:	4b2b      	ldr	r3, [pc, #172]	; (8005648 <prvSwitchTimerLists+0xc0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	3304      	adds	r3, #4
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fe f92f 	bl	800380c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d02e      	beq.n	8005622 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	4413      	add	r3, r2
 80055cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d90e      	bls.n	80055f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055e2:	4b19      	ldr	r3, [pc, #100]	; (8005648 <prvSwitchTimerLists+0xc0>)
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	3304      	adds	r3, #4
 80055ea:	4619      	mov	r1, r3
 80055ec:	4610      	mov	r0, r2
 80055ee:	f7fe f8d4 	bl	800379a <vListInsert>
 80055f2:	e016      	b.n	8005622 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055f4:	2300      	movs	r3, #0
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	2300      	movs	r3, #0
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	2100      	movs	r1, #0
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f7ff fd60 	bl	80050c4 <xTimerGenericCommand>
 8005604:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10a      	bne.n	8005622 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	603b      	str	r3, [r7, #0]
}
 800561e:	bf00      	nop
 8005620:	e7fe      	b.n	8005620 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005622:	4b09      	ldr	r3, [pc, #36]	; (8005648 <prvSwitchTimerLists+0xc0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1b1      	bne.n	8005590 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800562c:	4b06      	ldr	r3, [pc, #24]	; (8005648 <prvSwitchTimerLists+0xc0>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005632:	4b06      	ldr	r3, [pc, #24]	; (800564c <prvSwitchTimerLists+0xc4>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a04      	ldr	r2, [pc, #16]	; (8005648 <prvSwitchTimerLists+0xc0>)
 8005638:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800563a:	4a04      	ldr	r2, [pc, #16]	; (800564c <prvSwitchTimerLists+0xc4>)
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	6013      	str	r3, [r2, #0]
}
 8005640:	bf00      	nop
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	20000cec 	.word	0x20000cec
 800564c:	20000cf0 	.word	0x20000cf0

08005650 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005656:	f000 f965 	bl	8005924 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800565a:	4b15      	ldr	r3, [pc, #84]	; (80056b0 <prvCheckForValidListAndQueue+0x60>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d120      	bne.n	80056a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005662:	4814      	ldr	r0, [pc, #80]	; (80056b4 <prvCheckForValidListAndQueue+0x64>)
 8005664:	f7fe f848 	bl	80036f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005668:	4813      	ldr	r0, [pc, #76]	; (80056b8 <prvCheckForValidListAndQueue+0x68>)
 800566a:	f7fe f845 	bl	80036f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800566e:	4b13      	ldr	r3, [pc, #76]	; (80056bc <prvCheckForValidListAndQueue+0x6c>)
 8005670:	4a10      	ldr	r2, [pc, #64]	; (80056b4 <prvCheckForValidListAndQueue+0x64>)
 8005672:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005674:	4b12      	ldr	r3, [pc, #72]	; (80056c0 <prvCheckForValidListAndQueue+0x70>)
 8005676:	4a10      	ldr	r2, [pc, #64]	; (80056b8 <prvCheckForValidListAndQueue+0x68>)
 8005678:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800567a:	2300      	movs	r3, #0
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	4b11      	ldr	r3, [pc, #68]	; (80056c4 <prvCheckForValidListAndQueue+0x74>)
 8005680:	4a11      	ldr	r2, [pc, #68]	; (80056c8 <prvCheckForValidListAndQueue+0x78>)
 8005682:	2110      	movs	r1, #16
 8005684:	200a      	movs	r0, #10
 8005686:	f7fe f953 	bl	8003930 <xQueueGenericCreateStatic>
 800568a:	4603      	mov	r3, r0
 800568c:	4a08      	ldr	r2, [pc, #32]	; (80056b0 <prvCheckForValidListAndQueue+0x60>)
 800568e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005690:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <prvCheckForValidListAndQueue+0x60>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005698:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <prvCheckForValidListAndQueue+0x60>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	490b      	ldr	r1, [pc, #44]	; (80056cc <prvCheckForValidListAndQueue+0x7c>)
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fe fd6c 	bl	800417c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056a4:	f000 f96e 	bl	8005984 <vPortExitCritical>
}
 80056a8:	bf00      	nop
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20000cf4 	.word	0x20000cf4
 80056b4:	20000cc4 	.word	0x20000cc4
 80056b8:	20000cd8 	.word	0x20000cd8
 80056bc:	20000cec 	.word	0x20000cec
 80056c0:	20000cf0 	.word	0x20000cf0
 80056c4:	20000da0 	.word	0x20000da0
 80056c8:	20000d00 	.word	0x20000d00
 80056cc:	08005fe4 	.word	0x08005fe4

080056d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	3b04      	subs	r3, #4
 80056e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3b04      	subs	r3, #4
 80056ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f023 0201 	bic.w	r2, r3, #1
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3b04      	subs	r3, #4
 80056fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005700:	4a0c      	ldr	r2, [pc, #48]	; (8005734 <pxPortInitialiseStack+0x64>)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3b14      	subs	r3, #20
 800570a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3b04      	subs	r3, #4
 8005716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f06f 0202 	mvn.w	r2, #2
 800571e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	3b20      	subs	r3, #32
 8005724:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005726:	68fb      	ldr	r3, [r7, #12]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	08005739 	.word	0x08005739

08005738 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800573e:	2300      	movs	r3, #0
 8005740:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005742:	4b12      	ldr	r3, [pc, #72]	; (800578c <prvTaskExitError+0x54>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574a:	d00a      	beq.n	8005762 <prvTaskExitError+0x2a>
	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	60fb      	str	r3, [r7, #12]
}
 800575e:	bf00      	nop
 8005760:	e7fe      	b.n	8005760 <prvTaskExitError+0x28>
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	60bb      	str	r3, [r7, #8]
}
 8005774:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005776:	bf00      	nop
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0fc      	beq.n	8005778 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800577e:	bf00      	nop
 8005780:	bf00      	nop
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	2000000c 	.word	0x2000000c

08005790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005790:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <pxCurrentTCBConst2>)
 8005792:	6819      	ldr	r1, [r3, #0]
 8005794:	6808      	ldr	r0, [r1, #0]
 8005796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579a:	f380 8809 	msr	PSP, r0
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f04f 0000 	mov.w	r0, #0
 80057a6:	f380 8811 	msr	BASEPRI, r0
 80057aa:	4770      	bx	lr
 80057ac:	f3af 8000 	nop.w

080057b0 <pxCurrentTCBConst2>:
 80057b0:	200007c4 	.word	0x200007c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop

080057b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057b8:	4808      	ldr	r0, [pc, #32]	; (80057dc <prvPortStartFirstTask+0x24>)
 80057ba:	6800      	ldr	r0, [r0, #0]
 80057bc:	6800      	ldr	r0, [r0, #0]
 80057be:	f380 8808 	msr	MSP, r0
 80057c2:	f04f 0000 	mov.w	r0, #0
 80057c6:	f380 8814 	msr	CONTROL, r0
 80057ca:	b662      	cpsie	i
 80057cc:	b661      	cpsie	f
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	df00      	svc	0
 80057d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057da:	bf00      	nop
 80057dc:	e000ed08 	.word	0xe000ed08

080057e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057e6:	4b46      	ldr	r3, [pc, #280]	; (8005900 <xPortStartScheduler+0x120>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a46      	ldr	r2, [pc, #280]	; (8005904 <xPortStartScheduler+0x124>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d10a      	bne.n	8005806 <xPortStartScheduler+0x26>
	__asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	613b      	str	r3, [r7, #16]
}
 8005802:	bf00      	nop
 8005804:	e7fe      	b.n	8005804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005806:	4b3e      	ldr	r3, [pc, #248]	; (8005900 <xPortStartScheduler+0x120>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a3f      	ldr	r2, [pc, #252]	; (8005908 <xPortStartScheduler+0x128>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d10a      	bne.n	8005826 <xPortStartScheduler+0x46>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	60fb      	str	r3, [r7, #12]
}
 8005822:	bf00      	nop
 8005824:	e7fe      	b.n	8005824 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005826:	4b39      	ldr	r3, [pc, #228]	; (800590c <xPortStartScheduler+0x12c>)
 8005828:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	b2db      	uxtb	r3, r3
 8005830:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	22ff      	movs	r2, #255	; 0xff
 8005836:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005848:	b2da      	uxtb	r2, r3
 800584a:	4b31      	ldr	r3, [pc, #196]	; (8005910 <xPortStartScheduler+0x130>)
 800584c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800584e:	4b31      	ldr	r3, [pc, #196]	; (8005914 <xPortStartScheduler+0x134>)
 8005850:	2207      	movs	r2, #7
 8005852:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005854:	e009      	b.n	800586a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005856:	4b2f      	ldr	r3, [pc, #188]	; (8005914 <xPortStartScheduler+0x134>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3b01      	subs	r3, #1
 800585c:	4a2d      	ldr	r2, [pc, #180]	; (8005914 <xPortStartScheduler+0x134>)
 800585e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	b2db      	uxtb	r3, r3
 8005868:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800586a:	78fb      	ldrb	r3, [r7, #3]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005872:	2b80      	cmp	r3, #128	; 0x80
 8005874:	d0ef      	beq.n	8005856 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005876:	4b27      	ldr	r3, [pc, #156]	; (8005914 <xPortStartScheduler+0x134>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f1c3 0307 	rsb	r3, r3, #7
 800587e:	2b04      	cmp	r3, #4
 8005880:	d00a      	beq.n	8005898 <xPortStartScheduler+0xb8>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	60bb      	str	r3, [r7, #8]
}
 8005894:	bf00      	nop
 8005896:	e7fe      	b.n	8005896 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005898:	4b1e      	ldr	r3, [pc, #120]	; (8005914 <xPortStartScheduler+0x134>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	021b      	lsls	r3, r3, #8
 800589e:	4a1d      	ldr	r2, [pc, #116]	; (8005914 <xPortStartScheduler+0x134>)
 80058a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058a2:	4b1c      	ldr	r3, [pc, #112]	; (8005914 <xPortStartScheduler+0x134>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058aa:	4a1a      	ldr	r2, [pc, #104]	; (8005914 <xPortStartScheduler+0x134>)
 80058ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058b6:	4b18      	ldr	r3, [pc, #96]	; (8005918 <xPortStartScheduler+0x138>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a17      	ldr	r2, [pc, #92]	; (8005918 <xPortStartScheduler+0x138>)
 80058bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058c2:	4b15      	ldr	r3, [pc, #84]	; (8005918 <xPortStartScheduler+0x138>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a14      	ldr	r2, [pc, #80]	; (8005918 <xPortStartScheduler+0x138>)
 80058c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80058cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058ce:	f000 f8dd 	bl	8005a8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058d2:	4b12      	ldr	r3, [pc, #72]	; (800591c <xPortStartScheduler+0x13c>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058d8:	f000 f8fc 	bl	8005ad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058dc:	4b10      	ldr	r3, [pc, #64]	; (8005920 <xPortStartScheduler+0x140>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a0f      	ldr	r2, [pc, #60]	; (8005920 <xPortStartScheduler+0x140>)
 80058e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80058e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058e8:	f7ff ff66 	bl	80057b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058ec:	f7ff f856 	bl	800499c <vTaskSwitchContext>
	prvTaskExitError();
 80058f0:	f7ff ff22 	bl	8005738 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	e000ed00 	.word	0xe000ed00
 8005904:	410fc271 	.word	0x410fc271
 8005908:	410fc270 	.word	0x410fc270
 800590c:	e000e400 	.word	0xe000e400
 8005910:	20000df0 	.word	0x20000df0
 8005914:	20000df4 	.word	0x20000df4
 8005918:	e000ed20 	.word	0xe000ed20
 800591c:	2000000c 	.word	0x2000000c
 8005920:	e000ef34 	.word	0xe000ef34

08005924 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
	__asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	607b      	str	r3, [r7, #4]
}
 800593c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800593e:	4b0f      	ldr	r3, [pc, #60]	; (800597c <vPortEnterCritical+0x58>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3301      	adds	r3, #1
 8005944:	4a0d      	ldr	r2, [pc, #52]	; (800597c <vPortEnterCritical+0x58>)
 8005946:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005948:	4b0c      	ldr	r3, [pc, #48]	; (800597c <vPortEnterCritical+0x58>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d10f      	bne.n	8005970 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005950:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <vPortEnterCritical+0x5c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <vPortEnterCritical+0x4c>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	603b      	str	r3, [r7, #0]
}
 800596c:	bf00      	nop
 800596e:	e7fe      	b.n	800596e <vPortEnterCritical+0x4a>
	}
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	2000000c 	.word	0x2000000c
 8005980:	e000ed04 	.word	0xe000ed04

08005984 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800598a:	4b12      	ldr	r3, [pc, #72]	; (80059d4 <vPortExitCritical+0x50>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10a      	bne.n	80059a8 <vPortExitCritical+0x24>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	607b      	str	r3, [r7, #4]
}
 80059a4:	bf00      	nop
 80059a6:	e7fe      	b.n	80059a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059a8:	4b0a      	ldr	r3, [pc, #40]	; (80059d4 <vPortExitCritical+0x50>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3b01      	subs	r3, #1
 80059ae:	4a09      	ldr	r2, [pc, #36]	; (80059d4 <vPortExitCritical+0x50>)
 80059b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059b2:	4b08      	ldr	r3, [pc, #32]	; (80059d4 <vPortExitCritical+0x50>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d105      	bne.n	80059c6 <vPortExitCritical+0x42>
 80059ba:	2300      	movs	r3, #0
 80059bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	f383 8811 	msr	BASEPRI, r3
}
 80059c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	2000000c 	.word	0x2000000c
	...

080059e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059e0:	f3ef 8009 	mrs	r0, PSP
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	4b15      	ldr	r3, [pc, #84]	; (8005a40 <pxCurrentTCBConst>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	f01e 0f10 	tst.w	lr, #16
 80059f0:	bf08      	it	eq
 80059f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059fa:	6010      	str	r0, [r2, #0]
 80059fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a04:	f380 8811 	msr	BASEPRI, r0
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f7fe ffc4 	bl	800499c <vTaskSwitchContext>
 8005a14:	f04f 0000 	mov.w	r0, #0
 8005a18:	f380 8811 	msr	BASEPRI, r0
 8005a1c:	bc09      	pop	{r0, r3}
 8005a1e:	6819      	ldr	r1, [r3, #0]
 8005a20:	6808      	ldr	r0, [r1, #0]
 8005a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a26:	f01e 0f10 	tst.w	lr, #16
 8005a2a:	bf08      	it	eq
 8005a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a30:	f380 8809 	msr	PSP, r0
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	f3af 8000 	nop.w

08005a40 <pxCurrentTCBConst>:
 8005a40:	200007c4 	.word	0x200007c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a44:	bf00      	nop
 8005a46:	bf00      	nop

08005a48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	607b      	str	r3, [r7, #4]
}
 8005a60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a62:	f7fe fee1 	bl	8004828 <xTaskIncrementTick>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a6c:	4b06      	ldr	r3, [pc, #24]	; (8005a88 <xPortSysTickHandler+0x40>)
 8005a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	2300      	movs	r3, #0
 8005a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	f383 8811 	msr	BASEPRI, r3
}
 8005a7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a80:	bf00      	nop
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	e000ed04 	.word	0xe000ed04

08005a8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a90:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <vPortSetupTimerInterrupt+0x34>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a96:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <vPortSetupTimerInterrupt+0x38>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <vPortSetupTimerInterrupt+0x3c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a0a      	ldr	r2, [pc, #40]	; (8005acc <vPortSetupTimerInterrupt+0x40>)
 8005aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa6:	099b      	lsrs	r3, r3, #6
 8005aa8:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <vPortSetupTimerInterrupt+0x44>)
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005aae:	4b04      	ldr	r3, [pc, #16]	; (8005ac0 <vPortSetupTimerInterrupt+0x34>)
 8005ab0:	2207      	movs	r2, #7
 8005ab2:	601a      	str	r2, [r3, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	e000e010 	.word	0xe000e010
 8005ac4:	e000e018 	.word	0xe000e018
 8005ac8:	20000000 	.word	0x20000000
 8005acc:	10624dd3 	.word	0x10624dd3
 8005ad0:	e000e014 	.word	0xe000e014

08005ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ae4 <vPortEnableVFP+0x10>
 8005ad8:	6801      	ldr	r1, [r0, #0]
 8005ada:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005ade:	6001      	str	r1, [r0, #0]
 8005ae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ae2:	bf00      	nop
 8005ae4:	e000ed88 	.word	0xe000ed88

08005ae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005aee:	f3ef 8305 	mrs	r3, IPSR
 8005af2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2b0f      	cmp	r3, #15
 8005af8:	d914      	bls.n	8005b24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005afa:	4a17      	ldr	r2, [pc, #92]	; (8005b58 <vPortValidateInterruptPriority+0x70>)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4413      	add	r3, r2
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b04:	4b15      	ldr	r3, [pc, #84]	; (8005b5c <vPortValidateInterruptPriority+0x74>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	7afa      	ldrb	r2, [r7, #11]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d20a      	bcs.n	8005b24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	607b      	str	r3, [r7, #4]
}
 8005b20:	bf00      	nop
 8005b22:	e7fe      	b.n	8005b22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b24:	4b0e      	ldr	r3, [pc, #56]	; (8005b60 <vPortValidateInterruptPriority+0x78>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b2c:	4b0d      	ldr	r3, [pc, #52]	; (8005b64 <vPortValidateInterruptPriority+0x7c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d90a      	bls.n	8005b4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	603b      	str	r3, [r7, #0]
}
 8005b46:	bf00      	nop
 8005b48:	e7fe      	b.n	8005b48 <vPortValidateInterruptPriority+0x60>
	}
 8005b4a:	bf00      	nop
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	e000e3f0 	.word	0xe000e3f0
 8005b5c:	20000df0 	.word	0x20000df0
 8005b60:	e000ed0c 	.word	0xe000ed0c
 8005b64:	20000df4 	.word	0x20000df4

08005b68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08a      	sub	sp, #40	; 0x28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b70:	2300      	movs	r3, #0
 8005b72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b74:	f7fe fd9c 	bl	80046b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b78:	4b5b      	ldr	r3, [pc, #364]	; (8005ce8 <pvPortMalloc+0x180>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b80:	f000 f920 	bl	8005dc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b84:	4b59      	ldr	r3, [pc, #356]	; (8005cec <pvPortMalloc+0x184>)
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f040 8093 	bne.w	8005cb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01d      	beq.n	8005bd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005b98:	2208      	movs	r2, #8
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d014      	beq.n	8005bd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f023 0307 	bic.w	r3, r3, #7
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <pvPortMalloc+0x6c>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	617b      	str	r3, [r7, #20]
}
 8005bd0:	bf00      	nop
 8005bd2:	e7fe      	b.n	8005bd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d06e      	beq.n	8005cb8 <pvPortMalloc+0x150>
 8005bda:	4b45      	ldr	r3, [pc, #276]	; (8005cf0 <pvPortMalloc+0x188>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d869      	bhi.n	8005cb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005be4:	4b43      	ldr	r3, [pc, #268]	; (8005cf4 <pvPortMalloc+0x18c>)
 8005be6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005be8:	4b42      	ldr	r3, [pc, #264]	; (8005cf4 <pvPortMalloc+0x18c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bee:	e004      	b.n	8005bfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d903      	bls.n	8005c0c <pvPortMalloc+0xa4>
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1f1      	bne.n	8005bf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c0c:	4b36      	ldr	r3, [pc, #216]	; (8005ce8 <pvPortMalloc+0x180>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d050      	beq.n	8005cb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2208      	movs	r2, #8
 8005c1c:	4413      	add	r3, r2
 8005c1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	1ad2      	subs	r2, r2, r3
 8005c30:	2308      	movs	r3, #8
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d91f      	bls.n	8005c78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	f003 0307 	and.w	r3, r3, #7
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <pvPortMalloc+0xf8>
	__asm volatile
 8005c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4e:	f383 8811 	msr	BASEPRI, r3
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	613b      	str	r3, [r7, #16]
}
 8005c5c:	bf00      	nop
 8005c5e:	e7fe      	b.n	8005c5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	1ad2      	subs	r2, r2, r3
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c72:	69b8      	ldr	r0, [r7, #24]
 8005c74:	f000 f908 	bl	8005e88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c78:	4b1d      	ldr	r3, [pc, #116]	; (8005cf0 <pvPortMalloc+0x188>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	4a1b      	ldr	r2, [pc, #108]	; (8005cf0 <pvPortMalloc+0x188>)
 8005c84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c86:	4b1a      	ldr	r3, [pc, #104]	; (8005cf0 <pvPortMalloc+0x188>)
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	4b1b      	ldr	r3, [pc, #108]	; (8005cf8 <pvPortMalloc+0x190>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d203      	bcs.n	8005c9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c92:	4b17      	ldr	r3, [pc, #92]	; (8005cf0 <pvPortMalloc+0x188>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a18      	ldr	r2, [pc, #96]	; (8005cf8 <pvPortMalloc+0x190>)
 8005c98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	4b13      	ldr	r3, [pc, #76]	; (8005cec <pvPortMalloc+0x184>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	2200      	movs	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005cae:	4b13      	ldr	r3, [pc, #76]	; (8005cfc <pvPortMalloc+0x194>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	4a11      	ldr	r2, [pc, #68]	; (8005cfc <pvPortMalloc+0x194>)
 8005cb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005cb8:	f7fe fd08 	bl	80046cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	f003 0307 	and.w	r3, r3, #7
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <pvPortMalloc+0x174>
	__asm volatile
 8005cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	60fb      	str	r3, [r7, #12]
}
 8005cd8:	bf00      	nop
 8005cda:	e7fe      	b.n	8005cda <pvPortMalloc+0x172>
	return pvReturn;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3728      	adds	r7, #40	; 0x28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20001a00 	.word	0x20001a00
 8005cec:	20001a14 	.word	0x20001a14
 8005cf0:	20001a04 	.word	0x20001a04
 8005cf4:	200019f8 	.word	0x200019f8
 8005cf8:	20001a08 	.word	0x20001a08
 8005cfc:	20001a0c 	.word	0x20001a0c

08005d00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d04d      	beq.n	8005dae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d12:	2308      	movs	r3, #8
 8005d14:	425b      	negs	r3, r3
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	4413      	add	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	4b24      	ldr	r3, [pc, #144]	; (8005db8 <vPortFree+0xb8>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10a      	bne.n	8005d44 <vPortFree+0x44>
	__asm volatile
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	60fb      	str	r3, [r7, #12]
}
 8005d40:	bf00      	nop
 8005d42:	e7fe      	b.n	8005d42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <vPortFree+0x62>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	60bb      	str	r3, [r7, #8]
}
 8005d5e:	bf00      	nop
 8005d60:	e7fe      	b.n	8005d60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	4b14      	ldr	r3, [pc, #80]	; (8005db8 <vPortFree+0xb8>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01e      	beq.n	8005dae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d11a      	bne.n	8005dae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	4b0e      	ldr	r3, [pc, #56]	; (8005db8 <vPortFree+0xb8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	43db      	mvns	r3, r3
 8005d82:	401a      	ands	r2, r3
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d88:	f7fe fc92 	bl	80046b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	4b0a      	ldr	r3, [pc, #40]	; (8005dbc <vPortFree+0xbc>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4413      	add	r3, r2
 8005d96:	4a09      	ldr	r2, [pc, #36]	; (8005dbc <vPortFree+0xbc>)
 8005d98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d9a:	6938      	ldr	r0, [r7, #16]
 8005d9c:	f000 f874 	bl	8005e88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005da0:	4b07      	ldr	r3, [pc, #28]	; (8005dc0 <vPortFree+0xc0>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3301      	adds	r3, #1
 8005da6:	4a06      	ldr	r2, [pc, #24]	; (8005dc0 <vPortFree+0xc0>)
 8005da8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005daa:	f7fe fc8f 	bl	80046cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dae:	bf00      	nop
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	20001a14 	.word	0x20001a14
 8005dbc:	20001a04 	.word	0x20001a04
 8005dc0:	20001a10 	.word	0x20001a10

08005dc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005dce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005dd0:	4b27      	ldr	r3, [pc, #156]	; (8005e70 <prvHeapInit+0xac>)
 8005dd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f003 0307 	and.w	r3, r3, #7
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00c      	beq.n	8005df8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	3307      	adds	r3, #7
 8005de2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0307 	bic.w	r3, r3, #7
 8005dea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	4a1f      	ldr	r2, [pc, #124]	; (8005e70 <prvHeapInit+0xac>)
 8005df4:	4413      	add	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005dfc:	4a1d      	ldr	r2, [pc, #116]	; (8005e74 <prvHeapInit+0xb0>)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e02:	4b1c      	ldr	r3, [pc, #112]	; (8005e74 <prvHeapInit+0xb0>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e10:	2208      	movs	r2, #8
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0307 	bic.w	r3, r3, #7
 8005e1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4a15      	ldr	r2, [pc, #84]	; (8005e78 <prvHeapInit+0xb4>)
 8005e24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e26:	4b14      	ldr	r3, [pc, #80]	; (8005e78 <prvHeapInit+0xb4>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e2e:	4b12      	ldr	r3, [pc, #72]	; (8005e78 <prvHeapInit+0xb4>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	1ad2      	subs	r2, r2, r3
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e44:	4b0c      	ldr	r3, [pc, #48]	; (8005e78 <prvHeapInit+0xb4>)
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	4a0a      	ldr	r2, [pc, #40]	; (8005e7c <prvHeapInit+0xb8>)
 8005e52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	4a09      	ldr	r2, [pc, #36]	; (8005e80 <prvHeapInit+0xbc>)
 8005e5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e5c:	4b09      	ldr	r3, [pc, #36]	; (8005e84 <prvHeapInit+0xc0>)
 8005e5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e62:	601a      	str	r2, [r3, #0]
}
 8005e64:	bf00      	nop
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	20000df8 	.word	0x20000df8
 8005e74:	200019f8 	.word	0x200019f8
 8005e78:	20001a00 	.word	0x20001a00
 8005e7c:	20001a08 	.word	0x20001a08
 8005e80:	20001a04 	.word	0x20001a04
 8005e84:	20001a14 	.word	0x20001a14

08005e88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e90:	4b28      	ldr	r3, [pc, #160]	; (8005f34 <prvInsertBlockIntoFreeList+0xac>)
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	e002      	b.n	8005e9c <prvInsertBlockIntoFreeList+0x14>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d8f7      	bhi.n	8005e96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d108      	bne.n	8005eca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	441a      	add	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	441a      	add	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d118      	bne.n	8005f10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <prvInsertBlockIntoFreeList+0xb0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d00d      	beq.n	8005f06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	441a      	add	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	e008      	b.n	8005f18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f06:	4b0c      	ldr	r3, [pc, #48]	; (8005f38 <prvInsertBlockIntoFreeList+0xb0>)
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	e003      	b.n	8005f18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d002      	beq.n	8005f26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f26:	bf00      	nop
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	200019f8 	.word	0x200019f8
 8005f38:	20001a00 	.word	0x20001a00

08005f3c <memset>:
 8005f3c:	4402      	add	r2, r0
 8005f3e:	4603      	mov	r3, r0
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d100      	bne.n	8005f46 <memset+0xa>
 8005f44:	4770      	bx	lr
 8005f46:	f803 1b01 	strb.w	r1, [r3], #1
 8005f4a:	e7f9      	b.n	8005f40 <memset+0x4>

08005f4c <__libc_init_array>:
 8005f4c:	b570      	push	{r4, r5, r6, lr}
 8005f4e:	4d0d      	ldr	r5, [pc, #52]	; (8005f84 <__libc_init_array+0x38>)
 8005f50:	4c0d      	ldr	r4, [pc, #52]	; (8005f88 <__libc_init_array+0x3c>)
 8005f52:	1b64      	subs	r4, r4, r5
 8005f54:	10a4      	asrs	r4, r4, #2
 8005f56:	2600      	movs	r6, #0
 8005f58:	42a6      	cmp	r6, r4
 8005f5a:	d109      	bne.n	8005f70 <__libc_init_array+0x24>
 8005f5c:	4d0b      	ldr	r5, [pc, #44]	; (8005f8c <__libc_init_array+0x40>)
 8005f5e:	4c0c      	ldr	r4, [pc, #48]	; (8005f90 <__libc_init_array+0x44>)
 8005f60:	f000 f826 	bl	8005fb0 <_init>
 8005f64:	1b64      	subs	r4, r4, r5
 8005f66:	10a4      	asrs	r4, r4, #2
 8005f68:	2600      	movs	r6, #0
 8005f6a:	42a6      	cmp	r6, r4
 8005f6c:	d105      	bne.n	8005f7a <__libc_init_array+0x2e>
 8005f6e:	bd70      	pop	{r4, r5, r6, pc}
 8005f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f74:	4798      	blx	r3
 8005f76:	3601      	adds	r6, #1
 8005f78:	e7ee      	b.n	8005f58 <__libc_init_array+0xc>
 8005f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f7e:	4798      	blx	r3
 8005f80:	3601      	adds	r6, #1
 8005f82:	e7f2      	b.n	8005f6a <__libc_init_array+0x1e>
 8005f84:	08006058 	.word	0x08006058
 8005f88:	08006058 	.word	0x08006058
 8005f8c:	08006058 	.word	0x08006058
 8005f90:	0800605c 	.word	0x0800605c

08005f94 <memcpy>:
 8005f94:	440a      	add	r2, r1
 8005f96:	4291      	cmp	r1, r2
 8005f98:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f9c:	d100      	bne.n	8005fa0 <memcpy+0xc>
 8005f9e:	4770      	bx	lr
 8005fa0:	b510      	push	{r4, lr}
 8005fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005faa:	4291      	cmp	r1, r2
 8005fac:	d1f9      	bne.n	8005fa2 <memcpy+0xe>
 8005fae:	bd10      	pop	{r4, pc}

08005fb0 <_init>:
 8005fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb2:	bf00      	nop
 8005fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb6:	bc08      	pop	{r3}
 8005fb8:	469e      	mov	lr, r3
 8005fba:	4770      	bx	lr

08005fbc <_fini>:
 8005fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fbe:	bf00      	nop
 8005fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc2:	bc08      	pop	{r3}
 8005fc4:	469e      	mov	lr, r3
 8005fc6:	4770      	bx	lr
