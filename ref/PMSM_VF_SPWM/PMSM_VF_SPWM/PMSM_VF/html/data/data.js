var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"PMSM_VF","ref":false,"files":[{"name":"PMSM_VF.c","type":"source","group":"model","path":"C:\\Users\\guoqiang\\Desktop\\Motor Design\\PMSM_VF_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: PMSM_VF.c\r\n *\r\n * Code generated for Simulink model 'PMSM_VF'.\r\n *\r\n * Model version                  : 1.19\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Fri Dec  2 21:15:21 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"PMSM_VF.h\"\r\n#include \"rtwtypes.h\"\r\n#include <math.h>\r\n#include \"PMSM_VF_private.h\"\r\n\r\n/* Block states (default storage) */\r\nDW_PMSM_VF_T PMSM_VF_DW;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_PMSM_VF_T PMSM_VF_M_;\r\nRT_MODEL_PMSM_VF_T *const PMSM_VF_M = &PMSM_VF_M_;\r\n\r\n/* Model step function */\r\nvoid PMSM_VF_step(real32_T arg_Speed_Ref, real32_T arg_PWM[3])\r\n{\r\n  real32_T Initial;\r\n  real32_T rtb_Saturation;\r\n  real32_T rtb_Vbeta;\r\n\r\n  /* RateLimiter: '<S2>/Rate Limiter1' incorporates:\r\n   *  Inport: '<Root>/Speed_Ref'\r\n   */\r\n  rtb_Saturation = arg_Speed_Ref - PMSM_VF_DW.PrevY;\r\n  if (rtb_Saturation > 0.025F) {\r\n    rtb_Saturation = PMSM_VF_DW.PrevY + 0.025F;\r\n  } else if (rtb_Saturation < -0.025F) {\r\n    rtb_Saturation = PMSM_VF_DW.PrevY + -0.025F;\r\n  } else {\r\n    rtb_Saturation = arg_Speed_Ref;\r\n  }\r\n\r\n  PMSM_VF_DW.PrevY = rtb_Saturation;\r\n\r\n  /* End of RateLimiter: '<S2>/Rate Limiter1' */\r\n\r\n  /* Gain: '<S2>/Speed_to_Frequency' */\r\n  rtb_Saturation *= 0.116666667F;\r\n\r\n  /* Saturate: '<S2>/Saturation' */\r\n  if (rtb_Saturation > 1463.0F) {\r\n    rtb_Saturation = 1463.0F;\r\n  } else if (rtb_Saturation < 0.0F) {\r\n    rtb_Saturation = 0.0F;\r\n  }\r\n\r\n  /* End of Saturate: '<S2>/Saturation' */\r\n\r\n  /* Gain: '<S2>/Gain1' incorporates:\r\n   *  Bias: '<S2>/Bias'\r\n   *  Gain: '<S2>/V//F'\r\n   */\r\n  rtb_Vbeta = ((12.0F - Vmin) / 1463.0F * rtb_Saturation + Vmin) * 0.0833333358F;\r\n\r\n  /* Saturate: '<S2>/Saturation1' */\r\n  if (rtb_Vbeta > 1.0F) {\r\n    rtb_Vbeta = 1.0F;\r\n  } else if (rtb_Vbeta < 0.0F) {\r\n    rtb_Vbeta = 0.0F;\r\n  }\r\n\r\n  /* End of Saturate: '<S2>/Saturation1' */\r\n\r\n  /* InitialCondition: '<S6>/Initial' */\r\n  if (PMSM_VF_DW.Initial_FirstOutputTime) {\r\n    PMSM_VF_DW.Initial_FirstOutputTime = false;\r\n\r\n    /* InitialCondition: '<S6>/Initial' */\r\n    Initial = 0.0F;\r\n  } else {\r\n    /* InitialCondition: '<S6>/Initial' incorporates:\r\n     *  Bias: '<S9>/Bias'\r\n     *  Gain: '<S9>/Gain'\r\n     *  Gain: '<S9>/Gain1'\r\n     *  Rounding: '<S9>/Rounding Function'\r\n     *  Sum: '<S9>/Sum1'\r\n     */\r\n    Initial = PMSM_VF_DW.Integrator_DSTATE - floorf(0.159154937F *\r\n      PMSM_VF_DW.Integrator_DSTATE) * 6.28318548F;\r\n  }\r\n\r\n  /* End of InitialCondition: '<S6>/Initial' */\r\n\r\n  /* DiscreteIntegrator: '<S6>/Integrator' incorporates:\r\n   *  Constant: '<S7>/Constant'\r\n   *  Constant: '<S8>/Constant'\r\n   *  Logic: '<S6>/Logical Operator'\r\n   *  RelationalOperator: '<S7>/Compare'\r\n   *  RelationalOperator: '<S8>/Compare'\r\n   */\r\n  if ((PMSM_VF_DW.Integrator_DSTATE < 0.0F) || (PMSM_VF_DW.Integrator_DSTATE >=\r\n       6.28318548F)) {\r\n    PMSM_VF_DW.Integrator_DSTATE = Initial;\r\n  }\r\n\r\n  /* Fcn: '<S2>/Valpha' incorporates:\r\n   *  DiscreteIntegrator: '<S6>/Integrator'\r\n   */\r\n  Initial = rtb_Vbeta * cosf(PMSM_VF_DW.Integrator_DSTATE);\r\n\r\n  /* Fcn: '<S2>/Vbeta' incorporates:\r\n   *  DiscreteIntegrator: '<S6>/Integrator'\r\n   */\r\n  rtb_Vbeta *= sinf(PMSM_VF_DW.Integrator_DSTATE);\r\n\r\n  /* Outport: '<Root>/PWM' incorporates:\r\n   *  Constant: '<S1>/Constant'\r\n   *  Fcn: '<S5>/a'\r\n   *  Fcn: '<S5>/b'\r\n   *  Fcn: '<S5>/c'\r\n   *  Gain: '<S1>/Gain'\r\n   *  Sum: '<S1>/Sum'\r\n   */\r\n  arg_PWM[0] = (Initial + 1.0F) * 0.5F;\r\n  arg_PWM[1] = ((-0.5F * Initial + 0.866025388F * rtb_Vbeta) + 1.0F) * 0.5F;\r\n  arg_PWM[2] = ((-0.5F * Initial - 0.866025388F * rtb_Vbeta) + 1.0F) * 0.5F;\r\n\r\n  /* Update for DiscreteIntegrator: '<S6>/Integrator' incorporates:\r\n   *  Gain: '<S2>/Gain'\r\n   */\r\n  PMSM_VF_DW.Integrator_DSTATE += 6.28318548F * rtb_Saturation * 5.0E-5F;\r\n}\r\n\r\n/* Model initialize function */\r\nvoid PMSM_VF_initialize(void)\r\n{\r\n  /* Start for InitialCondition: '<S6>/Initial' */\r\n  PMSM_VF_DW.Initial_FirstOutputTime = true;\r\n}\r\n\r\n/* Model terminate function */\r\nvoid PMSM_VF_terminate(void)\r\n{\r\n  /* (no terminate code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"PMSM_VF.h","type":"header","group":"model","path":"C:\\Users\\guoqiang\\Desktop\\Motor Design\\PMSM_VF_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: PMSM_VF.h\r\n *\r\n * Code generated for Simulink model 'PMSM_VF'.\r\n *\r\n * Model version                  : 1.19\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Fri Dec  2 21:15:21 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_PMSM_VF_h_\r\n#define RTW_HEADER_PMSM_VF_h_\r\n#ifndef PMSM_VF_COMMON_INCLUDES_\r\n#define PMSM_VF_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* PMSM_VF_COMMON_INCLUDES_ */\r\n\r\n#include \"PMSM_VF_types.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Block states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real32_T Integrator_DSTATE;          /* '<S6>/Integrator' */\r\n  real32_T PrevY;                      /* '<S2>/Rate Limiter1' */\r\n  boolean_T Initial_FirstOutputTime;   /* '<S6>/Initial' */\r\n} DW_PMSM_VF_T;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_PMSM_VF_T {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n/* Block states (default storage) */\r\nextern DW_PMSM_VF_T PMSM_VF_DW;\r\n\r\n/* Model entry point functions */\r\nextern void PMSM_VF_initialize(void);\r\nextern void PMSM_VF_terminate(void);\r\n\r\n/* Customized model step function */\r\nextern void PMSM_VF_step(real32_T arg_Speed_Ref, real32_T arg_PWM[3]);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_PMSM_VF_T *const PMSM_VF_M;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S3>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<Root>/Scope' : Unused code path elimination\r\n * Block '<Root>/Scope1' : Unused code path elimination\r\n * Block '<Root>/Scope10' : Unused code path elimination\r\n * Block '<Root>/Scope11' : Unused code path elimination\r\n * Block '<Root>/Scope12' : Unused code path elimination\r\n * Block '<Root>/Scope13' : Unused code path elimination\r\n * Block '<Root>/Scope14' : Unused code path elimination\r\n * Block '<Root>/Scope15' : Unused code path elimination\r\n * Block '<Root>/Scope16' : Unused code path elimination\r\n * Block '<Root>/Scope17' : Unused code path elimination\r\n * Block '<Root>/Scope2' : Unused code path elimination\r\n * Block '<Root>/Scope3' : Unused code path elimination\r\n * Block '<Root>/Scope4' : Unused code path elimination\r\n * Block '<Root>/Scope5' : Unused code path elimination\r\n * Block '<Root>/Scope6' : Unused code path elimination\r\n * Block '<Root>/Scope7' : Unused code path elimination\r\n * Block '<Root>/Scope8' : Unused code path elimination\r\n * Block '<Root>/Scope9' : Unused code path elimination\r\n * Block '<S3>/Conversion' : Eliminate redundant data type conversion\r\n * Block '<S5>/K1' : Eliminated nontunable gain of 1\r\n * Block '<S5>/K2' : Eliminated nontunable gain of 1\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'PMSM_VF'\r\n * '<S1>'   : 'PMSM_VF/Output Handle'\r\n * '<S2>'   : 'PMSM_VF/V//F Control'\r\n * '<S3>'   : 'PMSM_VF/V//F Control/Data Type Conversion Inherited'\r\n * '<S4>'   : 'PMSM_VF/V//F Control/Integrator with Wrapped State (Discrete or Continuous)'\r\n * '<S5>'   : 'PMSM_VF/V//F Control/Inverse Clarke Transform'\r\n * '<S6>'   : 'PMSM_VF/V//F Control/Integrator with Wrapped State (Discrete or Continuous)/Discrete'\r\n * '<S7>'   : 'PMSM_VF/V//F Control/Integrator with Wrapped State (Discrete or Continuous)/Discrete/Compare To Constant'\r\n * '<S8>'   : 'PMSM_VF/V//F Control/Integrator with Wrapped State (Discrete or Continuous)/Discrete/Compare To Constant1'\r\n * '<S9>'   : 'PMSM_VF/V//F Control/Integrator with Wrapped State (Discrete or Continuous)/Discrete/Reinitialization'\r\n */\r\n#endif                                 /* RTW_HEADER_PMSM_VF_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"PMSM_VF_private.h","type":"header","group":"model","path":"C:\\Users\\guoqiang\\Desktop\\Motor Design\\PMSM_VF_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: PMSM_VF_private.h\r\n *\r\n * Code generated for Simulink model 'PMSM_VF'.\r\n *\r\n * Model version                  : 1.19\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Fri Dec  2 21:15:21 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_PMSM_VF_private_h_\r\n#define RTW_HEADER_PMSM_VF_private_h_\r\n#include \"rtwtypes.h\"\r\n\r\n/* Imported (extern) block parameters */\r\nextern real32_T Vmin;                  /* Variable: Vmin\r\n                                        * Referenced by:\r\n                                        *   '<S2>/Bias'\r\n                                        *   '<S2>/V//F'\r\n                                        */\r\n\r\n#endif                                 /* RTW_HEADER_PMSM_VF_private_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"PMSM_VF_types.h","type":"header","group":"model","path":"C:\\Users\\guoqiang\\Desktop\\Motor Design\\PMSM_VF_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: PMSM_VF_types.h\r\n *\r\n * Code generated for Simulink model 'PMSM_VF'.\r\n *\r\n * Model version                  : 1.19\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Fri Dec  2 21:15:21 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_PMSM_VF_types_h_\r\n#define RTW_HEADER_PMSM_VF_types_h_\r\n\r\n/* Model Code Variants */\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_PMSM_VF_T RT_MODEL_PMSM_VF_T;\r\n\r\n#endif                                 /* RTW_HEADER_PMSM_VF_types_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\guoqiang\\Desktop\\Motor Design\\PMSM_VF_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'PMSM_VF'.\r\n *\r\n * Model version                  : 1.19\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Fri Dec  2 21:15:21 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex-M\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T.                        *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"C:\\Users\\guoqiang\\Desktop\\Motor Design\\PMSM_VF_ert_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n * File: rtmodel.h\r\n *\r\n * Code generated for Simulink model 'PMSM_VF'.\r\n *\r\n * Model version                  : 1.19\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Fri Dec  2 21:15:21 2022\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rtmodel_h_\r\n#define RTW_HEADER_rtmodel_h_\r\n#include \"PMSM_VF.h\"\r\n#define MODEL_STEP_FCN_CONTROL_USED    1\r\n\r\n/* Macros generated for backwards compatibility  */\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((void*) 0)\r\n#endif\r\n#endif                                 /* RTW_HEADER_rtmodel_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}]};